// This file is auto-generated by @hey-api/openapi-ts

import { type Options, abpApiDefinitionGet, abpApplicationConfigurationGet, abpApplicationLocalizationGet, abpTenantFindTenantByName, abpTenantFindTenantById, accountRegister, accountSendPasswordResetCode, accountVerifyPasswordResetToken, accountResetPassword, auditLogGet, auditLogGetList, auditLogGetList2, auditLogGet2, corporateInfoProject, corporateInfoFindByCreditCode, corporateInfoGetOrAddCorporateInfo, corporateInfoUpdateStaffs, corporateInfoUpdateShareholders, corporateInfoUpdateBranches, corporateInfoUpdateInvestments, corporateInfoUpdateChangeInfos, corporateInfoUpdateAdministrativeLicenses, corporateInfoGet, corporateInfoGetList, corporateReportGetList, corporateReportCreate, corporateReportGetDownload, corporateReportGet, dynamicClaimsRefresh, emailSettingsGet, emailSettingsUpdate, emailSettingsSendTestEmail, featuresDelete, featuresGet, featuresUpdate, loginLogin, loginLogout, loginCheckPassword, permissionsGet, permissionsUpdate, profileGet, profileUpdate, profileChangePassword, roleGetAllList, roleGetList, roleCreate, roleDelete, roleGet, roleUpdate, tenantDelete, tenantGet, tenantUpdate, tenantGetList, tenantCreate, tenantDeleteDefaultConnectionString, tenantGetDefaultConnectionString, tenantUpdateDefaultConnectionString, timeZoneSettingsGet, timeZoneSettingsUpdate, timeZoneSettingsGetTimezones, userDelete, userGet, userUpdate, userGetList, userCreate, userGetRoles, userUpdateRoles, userGetAssignableRoles, userFindByUsername, userFindByEmail, userLookupFindById, userLookupFindByUserName, userLookupSearch, userLookupGetCount } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AbpApiDefinitionGetData, AbpApplicationConfigurationGetData, AbpApplicationLocalizationGetData, AbpTenantFindTenantByNameData, AbpTenantFindTenantByIdData, AccountRegisterData, AccountRegisterError, AccountRegisterResponse, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeError, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenError, AccountVerifyPasswordResetTokenResponse, AccountResetPasswordData, AccountResetPasswordError, AuditLogGetData, AuditLogGetListData, AuditLogGetList2Data, AuditLogGet2Data, CorporateInfoProjectData, CorporateInfoProjectError, CorporateInfoProjectResponse, CorporateInfoFindByCreditCodeData, CorporateInfoFindByCreditCodeError, CorporateInfoFindByCreditCodeResponse, CorporateInfoGetOrAddCorporateInfoData, CorporateInfoUpdateStaffsData, CorporateInfoUpdateStaffsError, CorporateInfoUpdateStaffsResponse, CorporateInfoUpdateShareholdersData, CorporateInfoUpdateShareholdersError, CorporateInfoUpdateShareholdersResponse, CorporateInfoUpdateBranchesData, CorporateInfoUpdateBranchesError, CorporateInfoUpdateBranchesResponse, CorporateInfoUpdateInvestmentsData, CorporateInfoUpdateInvestmentsError, CorporateInfoUpdateInvestmentsResponse, CorporateInfoUpdateChangeInfosData, CorporateInfoUpdateChangeInfosError, CorporateInfoUpdateChangeInfosResponse, CorporateInfoUpdateAdministrativeLicensesData, CorporateInfoUpdateAdministrativeLicensesError, CorporateInfoUpdateAdministrativeLicensesResponse, CorporateInfoGetData, CorporateInfoGetListData, CorporateReportGetListData, CorporateReportCreateData, CorporateReportCreateError, CorporateReportCreateResponse, CorporateReportGetDownloadData, CorporateReportGetData, DynamicClaimsRefreshData, DynamicClaimsRefreshError, EmailSettingsGetData, EmailSettingsUpdateData, EmailSettingsUpdateError, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailError, FeaturesDeleteData, FeaturesDeleteError, FeaturesGetData, FeaturesUpdateData, FeaturesUpdateError, LoginLoginData, LoginLoginError, LoginLoginResponse, LoginLogoutData, LoginCheckPasswordData, LoginCheckPasswordError, LoginCheckPasswordResponse, PermissionsGetData, PermissionsUpdateData, PermissionsUpdateError, ProfileGetData, ProfileUpdateData, ProfileUpdateError, ProfileUpdateResponse, ProfileChangePasswordData, ProfileChangePasswordError, RoleGetAllListData, RoleGetListData, RoleCreateData, RoleCreateError, RoleCreateResponse, RoleDeleteData, RoleDeleteError, RoleGetData, RoleUpdateData, RoleUpdateError, RoleUpdateResponse, TenantDeleteData, TenantDeleteError, TenantGetData, TenantUpdateData, TenantUpdateError, TenantUpdateResponse, TenantGetListData, TenantCreateData, TenantCreateError, TenantCreateResponse, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringError, TenantGetDefaultConnectionStringData, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringError, TimeZoneSettingsGetData, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateError, TimeZoneSettingsGetTimezonesData, UserDeleteData, UserDeleteError, UserGetData, UserUpdateData, UserUpdateError, UserUpdateResponse, UserGetListData, UserCreateData, UserCreateError, UserCreateResponse, UserGetRolesData, UserUpdateRolesData, UserUpdateRolesError, UserGetAssignableRolesData, UserFindByUsernameData, UserFindByEmailData, UserLookupFindByIdData, UserLookupFindByUserNameData, UserLookupSearchData, UserLookupGetCountData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const abpApiDefinitionGetQueryKey = (options?: Options<AbpApiDefinitionGetData>) => createQueryKey('abpApiDefinitionGet', options);

export const abpApiDefinitionGetOptions = (options?: Options<AbpApiDefinitionGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await abpApiDefinitionGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: abpApiDefinitionGetQueryKey(options)
    });
};

export const abpApplicationConfigurationGetQueryKey = (options?: Options<AbpApplicationConfigurationGetData>) => createQueryKey('abpApplicationConfigurationGet', options);

export const abpApplicationConfigurationGetOptions = (options?: Options<AbpApplicationConfigurationGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await abpApplicationConfigurationGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: abpApplicationConfigurationGetQueryKey(options)
    });
};

export const abpApplicationLocalizationGetQueryKey = (options: Options<AbpApplicationLocalizationGetData>) => createQueryKey('abpApplicationLocalizationGet', options);

export const abpApplicationLocalizationGetOptions = (options: Options<AbpApplicationLocalizationGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await abpApplicationLocalizationGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: abpApplicationLocalizationGetQueryKey(options)
    });
};

export const abpTenantFindTenantByNameQueryKey = (options: Options<AbpTenantFindTenantByNameData>) => createQueryKey('abpTenantFindTenantByName', options);

export const abpTenantFindTenantByNameOptions = (options: Options<AbpTenantFindTenantByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await abpTenantFindTenantByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: abpTenantFindTenantByNameQueryKey(options)
    });
};

export const abpTenantFindTenantByIdQueryKey = (options: Options<AbpTenantFindTenantByIdData>) => createQueryKey('abpTenantFindTenantById', options);

export const abpTenantFindTenantByIdOptions = (options: Options<AbpTenantFindTenantByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await abpTenantFindTenantById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: abpTenantFindTenantByIdQueryKey(options)
    });
};

export const accountRegisterQueryKey = (options?: Options<AccountRegisterData>) => createQueryKey('accountRegister', options);

export const accountRegisterOptions = (options?: Options<AccountRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await accountRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: accountRegisterQueryKey(options)
    });
};

export const accountRegisterMutation = (options?: Partial<Options<AccountRegisterData>>): UseMutationOptions<AccountRegisterResponse, AccountRegisterError, Options<AccountRegisterData>> => {
    const mutationOptions: UseMutationOptions<AccountRegisterResponse, AccountRegisterError, Options<AccountRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await accountRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const accountSendPasswordResetCodeQueryKey = (options?: Options<AccountSendPasswordResetCodeData>) => createQueryKey('accountSendPasswordResetCode', options);

export const accountSendPasswordResetCodeOptions = (options?: Options<AccountSendPasswordResetCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await accountSendPasswordResetCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: accountSendPasswordResetCodeQueryKey(options)
    });
};

export const accountSendPasswordResetCodeMutation = (options?: Partial<Options<AccountSendPasswordResetCodeData>>): UseMutationOptions<unknown, AccountSendPasswordResetCodeError, Options<AccountSendPasswordResetCodeData>> => {
    const mutationOptions: UseMutationOptions<unknown, AccountSendPasswordResetCodeError, Options<AccountSendPasswordResetCodeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await accountSendPasswordResetCode({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const accountVerifyPasswordResetTokenQueryKey = (options?: Options<AccountVerifyPasswordResetTokenData>) => createQueryKey('accountVerifyPasswordResetToken', options);

export const accountVerifyPasswordResetTokenOptions = (options?: Options<AccountVerifyPasswordResetTokenData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await accountVerifyPasswordResetToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: accountVerifyPasswordResetTokenQueryKey(options)
    });
};

export const accountVerifyPasswordResetTokenMutation = (options?: Partial<Options<AccountVerifyPasswordResetTokenData>>): UseMutationOptions<AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, Options<AccountVerifyPasswordResetTokenData>> => {
    const mutationOptions: UseMutationOptions<AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, Options<AccountVerifyPasswordResetTokenData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await accountVerifyPasswordResetToken({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const accountResetPasswordQueryKey = (options?: Options<AccountResetPasswordData>) => createQueryKey('accountResetPassword', options);

export const accountResetPasswordOptions = (options?: Options<AccountResetPasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await accountResetPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: accountResetPasswordQueryKey(options)
    });
};

export const accountResetPasswordMutation = (options?: Partial<Options<AccountResetPasswordData>>): UseMutationOptions<unknown, AccountResetPasswordError, Options<AccountResetPasswordData>> => {
    const mutationOptions: UseMutationOptions<unknown, AccountResetPasswordError, Options<AccountResetPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await accountResetPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const auditLogGetQueryKey = (options: Options<AuditLogGetData>) => createQueryKey('auditLogGet', options);

export const auditLogGetOptions = (options: Options<AuditLogGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await auditLogGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: auditLogGetQueryKey(options)
    });
};

export const auditLogGetListQueryKey = (options?: Options<AuditLogGetListData>) => createQueryKey('auditLogGetList', options);

export const auditLogGetListOptions = (options?: Options<AuditLogGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await auditLogGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: auditLogGetListQueryKey(options)
    });
};

export const auditLogGetList2QueryKey = (options?: Options<AuditLogGetList2Data>) => createQueryKey('auditLogGetList2', options);

export const auditLogGetList2Options = (options?: Options<AuditLogGetList2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await auditLogGetList2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: auditLogGetList2QueryKey(options)
    });
};

export const auditLogGet2QueryKey = (options: Options<AuditLogGet2Data>) => createQueryKey('auditLogGet2', options);

export const auditLogGet2Options = (options: Options<AuditLogGet2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await auditLogGet2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: auditLogGet2QueryKey(options)
    });
};

export const corporateInfoProjectQueryKey = (options?: Options<CorporateInfoProjectData>) => createQueryKey('corporateInfoProject', options);

export const corporateInfoProjectOptions = (options?: Options<CorporateInfoProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateInfoProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateInfoProjectQueryKey(options)
    });
};

export const corporateInfoProjectMutation = (options?: Partial<Options<CorporateInfoProjectData>>): UseMutationOptions<CorporateInfoProjectResponse, CorporateInfoProjectError, Options<CorporateInfoProjectData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoProjectResponse, CorporateInfoProjectError, Options<CorporateInfoProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoFindByCreditCodeQueryKey = (options?: Options<CorporateInfoFindByCreditCodeData>) => createQueryKey('corporateInfoFindByCreditCode', options);

export const corporateInfoFindByCreditCodeOptions = (options?: Options<CorporateInfoFindByCreditCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateInfoFindByCreditCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateInfoFindByCreditCodeQueryKey(options)
    });
};

export const corporateInfoFindByCreditCodeMutation = (options?: Partial<Options<CorporateInfoFindByCreditCodeData>>): UseMutationOptions<CorporateInfoFindByCreditCodeResponse, CorporateInfoFindByCreditCodeError, Options<CorporateInfoFindByCreditCodeData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoFindByCreditCodeResponse, CorporateInfoFindByCreditCodeError, Options<CorporateInfoFindByCreditCodeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoFindByCreditCode({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoGetOrAddCorporateInfoQueryKey = (options?: Options<CorporateInfoGetOrAddCorporateInfoData>) => createQueryKey('corporateInfoGetOrAddCorporateInfo', options);

export const corporateInfoGetOrAddCorporateInfoOptions = (options?: Options<CorporateInfoGetOrAddCorporateInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateInfoGetOrAddCorporateInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateInfoGetOrAddCorporateInfoQueryKey(options)
    });
};

export const corporateInfoUpdateStaffsMutation = (options?: Partial<Options<CorporateInfoUpdateStaffsData>>): UseMutationOptions<CorporateInfoUpdateStaffsResponse, CorporateInfoUpdateStaffsError, Options<CorporateInfoUpdateStaffsData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateStaffsResponse, CorporateInfoUpdateStaffsError, Options<CorporateInfoUpdateStaffsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateStaffs({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoUpdateShareholdersMutation = (options?: Partial<Options<CorporateInfoUpdateShareholdersData>>): UseMutationOptions<CorporateInfoUpdateShareholdersResponse, CorporateInfoUpdateShareholdersError, Options<CorporateInfoUpdateShareholdersData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateShareholdersResponse, CorporateInfoUpdateShareholdersError, Options<CorporateInfoUpdateShareholdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateShareholders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoUpdateBranchesMutation = (options?: Partial<Options<CorporateInfoUpdateBranchesData>>): UseMutationOptions<CorporateInfoUpdateBranchesResponse, CorporateInfoUpdateBranchesError, Options<CorporateInfoUpdateBranchesData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateBranchesResponse, CorporateInfoUpdateBranchesError, Options<CorporateInfoUpdateBranchesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateBranches({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoUpdateInvestmentsMutation = (options?: Partial<Options<CorporateInfoUpdateInvestmentsData>>): UseMutationOptions<CorporateInfoUpdateInvestmentsResponse, CorporateInfoUpdateInvestmentsError, Options<CorporateInfoUpdateInvestmentsData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateInvestmentsResponse, CorporateInfoUpdateInvestmentsError, Options<CorporateInfoUpdateInvestmentsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateInvestments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoUpdateChangeInfosMutation = (options?: Partial<Options<CorporateInfoUpdateChangeInfosData>>): UseMutationOptions<CorporateInfoUpdateChangeInfosResponse, CorporateInfoUpdateChangeInfosError, Options<CorporateInfoUpdateChangeInfosData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateChangeInfosResponse, CorporateInfoUpdateChangeInfosError, Options<CorporateInfoUpdateChangeInfosData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateChangeInfos({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoUpdateAdministrativeLicensesMutation = (options?: Partial<Options<CorporateInfoUpdateAdministrativeLicensesData>>): UseMutationOptions<CorporateInfoUpdateAdministrativeLicensesResponse, CorporateInfoUpdateAdministrativeLicensesError, Options<CorporateInfoUpdateAdministrativeLicensesData>> => {
    const mutationOptions: UseMutationOptions<CorporateInfoUpdateAdministrativeLicensesResponse, CorporateInfoUpdateAdministrativeLicensesError, Options<CorporateInfoUpdateAdministrativeLicensesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateInfoUpdateAdministrativeLicenses({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateInfoGetQueryKey = (options: Options<CorporateInfoGetData>) => createQueryKey('corporateInfoGet', options);

export const corporateInfoGetOptions = (options: Options<CorporateInfoGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateInfoGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateInfoGetQueryKey(options)
    });
};

export const corporateInfoGetListQueryKey = (options?: Options<CorporateInfoGetListData>) => createQueryKey('corporateInfoGetList', options);

export const corporateInfoGetListOptions = (options?: Options<CorporateInfoGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateInfoGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateInfoGetListQueryKey(options)
    });
};

export const corporateReportGetListQueryKey = (options?: Options<CorporateReportGetListData>) => createQueryKey('corporateReportGetList', options);

export const corporateReportGetListOptions = (options?: Options<CorporateReportGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateReportGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateReportGetListQueryKey(options)
    });
};

export const corporateReportCreateQueryKey = (options?: Options<CorporateReportCreateData>) => createQueryKey('corporateReportCreate', options);

export const corporateReportCreateOptions = (options?: Options<CorporateReportCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateReportCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateReportCreateQueryKey(options)
    });
};

export const corporateReportCreateMutation = (options?: Partial<Options<CorporateReportCreateData>>): UseMutationOptions<CorporateReportCreateResponse, CorporateReportCreateError, Options<CorporateReportCreateData>> => {
    const mutationOptions: UseMutationOptions<CorporateReportCreateResponse, CorporateReportCreateError, Options<CorporateReportCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await corporateReportCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const corporateReportGetDownloadQueryKey = (options: Options<CorporateReportGetDownloadData>) => createQueryKey('corporateReportGetDownload', options);

export const corporateReportGetDownloadOptions = (options: Options<CorporateReportGetDownloadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateReportGetDownload({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateReportGetDownloadQueryKey(options)
    });
};

export const corporateReportGetQueryKey = (options: Options<CorporateReportGetData>) => createQueryKey('corporateReportGet', options);

export const corporateReportGetOptions = (options: Options<CorporateReportGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await corporateReportGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: corporateReportGetQueryKey(options)
    });
};

export const dynamicClaimsRefreshQueryKey = (options?: Options<DynamicClaimsRefreshData>) => createQueryKey('dynamicClaimsRefresh', options);

export const dynamicClaimsRefreshOptions = (options?: Options<DynamicClaimsRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await dynamicClaimsRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: dynamicClaimsRefreshQueryKey(options)
    });
};

export const dynamicClaimsRefreshMutation = (options?: Partial<Options<DynamicClaimsRefreshData>>): UseMutationOptions<unknown, DynamicClaimsRefreshError, Options<DynamicClaimsRefreshData>> => {
    const mutationOptions: UseMutationOptions<unknown, DynamicClaimsRefreshError, Options<DynamicClaimsRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await dynamicClaimsRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const emailSettingsGetQueryKey = (options?: Options<EmailSettingsGetData>) => createQueryKey('emailSettingsGet', options);

export const emailSettingsGetOptions = (options?: Options<EmailSettingsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await emailSettingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: emailSettingsGetQueryKey(options)
    });
};

export const emailSettingsUpdateQueryKey = (options?: Options<EmailSettingsUpdateData>) => createQueryKey('emailSettingsUpdate', options);

export const emailSettingsUpdateOptions = (options?: Options<EmailSettingsUpdateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await emailSettingsUpdate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: emailSettingsUpdateQueryKey(options)
    });
};

export const emailSettingsUpdateMutation = (options?: Partial<Options<EmailSettingsUpdateData>>): UseMutationOptions<unknown, EmailSettingsUpdateError, Options<EmailSettingsUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, EmailSettingsUpdateError, Options<EmailSettingsUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await emailSettingsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const emailSettingsSendTestEmailQueryKey = (options?: Options<EmailSettingsSendTestEmailData>) => createQueryKey('emailSettingsSendTestEmail', options);

export const emailSettingsSendTestEmailOptions = (options?: Options<EmailSettingsSendTestEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await emailSettingsSendTestEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: emailSettingsSendTestEmailQueryKey(options)
    });
};

export const emailSettingsSendTestEmailMutation = (options?: Partial<Options<EmailSettingsSendTestEmailData>>): UseMutationOptions<unknown, EmailSettingsSendTestEmailError, Options<EmailSettingsSendTestEmailData>> => {
    const mutationOptions: UseMutationOptions<unknown, EmailSettingsSendTestEmailError, Options<EmailSettingsSendTestEmailData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await emailSettingsSendTestEmail({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const featuresDeleteMutation = (options?: Partial<Options<FeaturesDeleteData>>): UseMutationOptions<unknown, FeaturesDeleteError, Options<FeaturesDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, FeaturesDeleteError, Options<FeaturesDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await featuresDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const featuresGetQueryKey = (options?: Options<FeaturesGetData>) => createQueryKey('featuresGet', options);

export const featuresGetOptions = (options?: Options<FeaturesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await featuresGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: featuresGetQueryKey(options)
    });
};

export const featuresUpdateMutation = (options?: Partial<Options<FeaturesUpdateData>>): UseMutationOptions<unknown, FeaturesUpdateError, Options<FeaturesUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, FeaturesUpdateError, Options<FeaturesUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await featuresUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginLoginQueryKey = (options?: Options<LoginLoginData>) => createQueryKey('loginLogin', options);

export const loginLoginOptions = (options?: Options<LoginLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginLoginQueryKey(options)
    });
};

export const loginLoginMutation = (options?: Partial<Options<LoginLoginData>>): UseMutationOptions<LoginLoginResponse, LoginLoginError, Options<LoginLoginData>> => {
    const mutationOptions: UseMutationOptions<LoginLoginResponse, LoginLoginError, Options<LoginLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginLogoutQueryKey = (options?: Options<LoginLogoutData>) => createQueryKey('loginLogout', options);

export const loginLogoutOptions = (options?: Options<LoginLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginLogoutQueryKey(options)
    });
};

export const loginCheckPasswordQueryKey = (options?: Options<LoginCheckPasswordData>) => createQueryKey('loginCheckPassword', options);

export const loginCheckPasswordOptions = (options?: Options<LoginCheckPasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginCheckPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginCheckPasswordQueryKey(options)
    });
};

export const loginCheckPasswordMutation = (options?: Partial<Options<LoginCheckPasswordData>>): UseMutationOptions<LoginCheckPasswordResponse, LoginCheckPasswordError, Options<LoginCheckPasswordData>> => {
    const mutationOptions: UseMutationOptions<LoginCheckPasswordResponse, LoginCheckPasswordError, Options<LoginCheckPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginCheckPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const permissionsGetQueryKey = (options?: Options<PermissionsGetData>) => createQueryKey('permissionsGet', options);

export const permissionsGetOptions = (options?: Options<PermissionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await permissionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: permissionsGetQueryKey(options)
    });
};

export const permissionsUpdateMutation = (options?: Partial<Options<PermissionsUpdateData>>): UseMutationOptions<unknown, PermissionsUpdateError, Options<PermissionsUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, PermissionsUpdateError, Options<PermissionsUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await permissionsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const profileGetQueryKey = (options?: Options<ProfileGetData>) => createQueryKey('profileGet', options);

export const profileGetOptions = (options?: Options<ProfileGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await profileGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: profileGetQueryKey(options)
    });
};

export const profileUpdateMutation = (options?: Partial<Options<ProfileUpdateData>>): UseMutationOptions<ProfileUpdateResponse, ProfileUpdateError, Options<ProfileUpdateData>> => {
    const mutationOptions: UseMutationOptions<ProfileUpdateResponse, ProfileUpdateError, Options<ProfileUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await profileUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const profileChangePasswordQueryKey = (options?: Options<ProfileChangePasswordData>) => createQueryKey('profileChangePassword', options);

export const profileChangePasswordOptions = (options?: Options<ProfileChangePasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await profileChangePassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: profileChangePasswordQueryKey(options)
    });
};

export const profileChangePasswordMutation = (options?: Partial<Options<ProfileChangePasswordData>>): UseMutationOptions<unknown, ProfileChangePasswordError, Options<ProfileChangePasswordData>> => {
    const mutationOptions: UseMutationOptions<unknown, ProfileChangePasswordError, Options<ProfileChangePasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await profileChangePassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleGetAllListQueryKey = (options?: Options<RoleGetAllListData>) => createQueryKey('roleGetAllList', options);

export const roleGetAllListOptions = (options?: Options<RoleGetAllListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleGetAllList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleGetAllListQueryKey(options)
    });
};

export const roleGetListQueryKey = (options?: Options<RoleGetListData>) => createQueryKey('roleGetList', options);

export const roleGetListOptions = (options?: Options<RoleGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleGetListQueryKey(options)
    });
};

export const roleCreateQueryKey = (options?: Options<RoleCreateData>) => createQueryKey('roleCreate', options);

export const roleCreateOptions = (options?: Options<RoleCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleCreateQueryKey(options)
    });
};

export const roleCreateMutation = (options?: Partial<Options<RoleCreateData>>): UseMutationOptions<RoleCreateResponse, RoleCreateError, Options<RoleCreateData>> => {
    const mutationOptions: UseMutationOptions<RoleCreateResponse, RoleCreateError, Options<RoleCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await roleCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleDeleteMutation = (options?: Partial<Options<RoleDeleteData>>): UseMutationOptions<unknown, RoleDeleteError, Options<RoleDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, RoleDeleteError, Options<RoleDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await roleDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const roleGetQueryKey = (options: Options<RoleGetData>) => createQueryKey('roleGet', options);

export const roleGetOptions = (options: Options<RoleGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await roleGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: roleGetQueryKey(options)
    });
};

export const roleUpdateMutation = (options?: Partial<Options<RoleUpdateData>>): UseMutationOptions<RoleUpdateResponse, RoleUpdateError, Options<RoleUpdateData>> => {
    const mutationOptions: UseMutationOptions<RoleUpdateResponse, RoleUpdateError, Options<RoleUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await roleUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tenantDeleteMutation = (options?: Partial<Options<TenantDeleteData>>): UseMutationOptions<unknown, TenantDeleteError, Options<TenantDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, TenantDeleteError, Options<TenantDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tenantDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tenantGetQueryKey = (options: Options<TenantGetData>) => createQueryKey('tenantGet', options);

export const tenantGetOptions = (options: Options<TenantGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tenantGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tenantGetQueryKey(options)
    });
};

export const tenantUpdateMutation = (options?: Partial<Options<TenantUpdateData>>): UseMutationOptions<TenantUpdateResponse, TenantUpdateError, Options<TenantUpdateData>> => {
    const mutationOptions: UseMutationOptions<TenantUpdateResponse, TenantUpdateError, Options<TenantUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tenantUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tenantGetListQueryKey = (options?: Options<TenantGetListData>) => createQueryKey('tenantGetList', options);

export const tenantGetListOptions = (options?: Options<TenantGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tenantGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tenantGetListQueryKey(options)
    });
};

export const tenantCreateQueryKey = (options?: Options<TenantCreateData>) => createQueryKey('tenantCreate', options);

export const tenantCreateOptions = (options?: Options<TenantCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tenantCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tenantCreateQueryKey(options)
    });
};

export const tenantCreateMutation = (options?: Partial<Options<TenantCreateData>>): UseMutationOptions<TenantCreateResponse, TenantCreateError, Options<TenantCreateData>> => {
    const mutationOptions: UseMutationOptions<TenantCreateResponse, TenantCreateError, Options<TenantCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tenantCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tenantDeleteDefaultConnectionStringMutation = (options?: Partial<Options<TenantDeleteDefaultConnectionStringData>>): UseMutationOptions<unknown, TenantDeleteDefaultConnectionStringError, Options<TenantDeleteDefaultConnectionStringData>> => {
    const mutationOptions: UseMutationOptions<unknown, TenantDeleteDefaultConnectionStringError, Options<TenantDeleteDefaultConnectionStringData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tenantDeleteDefaultConnectionString({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tenantGetDefaultConnectionStringQueryKey = (options: Options<TenantGetDefaultConnectionStringData>) => createQueryKey('tenantGetDefaultConnectionString', options);

export const tenantGetDefaultConnectionStringOptions = (options: Options<TenantGetDefaultConnectionStringData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tenantGetDefaultConnectionString({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tenantGetDefaultConnectionStringQueryKey(options)
    });
};

export const tenantUpdateDefaultConnectionStringMutation = (options?: Partial<Options<TenantUpdateDefaultConnectionStringData>>): UseMutationOptions<unknown, TenantUpdateDefaultConnectionStringError, Options<TenantUpdateDefaultConnectionStringData>> => {
    const mutationOptions: UseMutationOptions<unknown, TenantUpdateDefaultConnectionStringError, Options<TenantUpdateDefaultConnectionStringData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tenantUpdateDefaultConnectionString({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const timeZoneSettingsGetQueryKey = (options?: Options<TimeZoneSettingsGetData>) => createQueryKey('timeZoneSettingsGet', options);

export const timeZoneSettingsGetOptions = (options?: Options<TimeZoneSettingsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await timeZoneSettingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: timeZoneSettingsGetQueryKey(options)
    });
};

export const timeZoneSettingsUpdateQueryKey = (options?: Options<TimeZoneSettingsUpdateData>) => createQueryKey('timeZoneSettingsUpdate', options);

export const timeZoneSettingsUpdateOptions = (options?: Options<TimeZoneSettingsUpdateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await timeZoneSettingsUpdate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: timeZoneSettingsUpdateQueryKey(options)
    });
};

export const timeZoneSettingsUpdateMutation = (options?: Partial<Options<TimeZoneSettingsUpdateData>>): UseMutationOptions<unknown, TimeZoneSettingsUpdateError, Options<TimeZoneSettingsUpdateData>> => {
    const mutationOptions: UseMutationOptions<unknown, TimeZoneSettingsUpdateError, Options<TimeZoneSettingsUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await timeZoneSettingsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const timeZoneSettingsGetTimezonesQueryKey = (options?: Options<TimeZoneSettingsGetTimezonesData>) => createQueryKey('timeZoneSettingsGetTimezones', options);

export const timeZoneSettingsGetTimezonesOptions = (options?: Options<TimeZoneSettingsGetTimezonesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await timeZoneSettingsGetTimezones({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: timeZoneSettingsGetTimezonesQueryKey(options)
    });
};

export const userDeleteMutation = (options?: Partial<Options<UserDeleteData>>): UseMutationOptions<unknown, UserDeleteError, Options<UserDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, UserDeleteError, Options<UserDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await userDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetQueryKey = (options: Options<UserGetData>) => createQueryKey('userGet', options);

export const userGetOptions = (options: Options<UserGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetQueryKey(options)
    });
};

export const userUpdateMutation = (options?: Partial<Options<UserUpdateData>>): UseMutationOptions<UserUpdateResponse, UserUpdateError, Options<UserUpdateData>> => {
    const mutationOptions: UseMutationOptions<UserUpdateResponse, UserUpdateError, Options<UserUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await userUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetListQueryKey = (options?: Options<UserGetListData>) => createQueryKey('userGetList', options);

export const userGetListOptions = (options?: Options<UserGetListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetListQueryKey(options)
    });
};

export const userCreateQueryKey = (options?: Options<UserCreateData>) => createQueryKey('userCreate', options);

export const userCreateOptions = (options?: Options<UserCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userCreateQueryKey(options)
    });
};

export const userCreateMutation = (options?: Partial<Options<UserCreateData>>): UseMutationOptions<UserCreateResponse, UserCreateError, Options<UserCreateData>> => {
    const mutationOptions: UseMutationOptions<UserCreateResponse, UserCreateError, Options<UserCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await userCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetRolesQueryKey = (options: Options<UserGetRolesData>) => createQueryKey('userGetRoles', options);

export const userGetRolesOptions = (options: Options<UserGetRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetRolesQueryKey(options)
    });
};

export const userUpdateRolesMutation = (options?: Partial<Options<UserUpdateRolesData>>): UseMutationOptions<unknown, UserUpdateRolesError, Options<UserUpdateRolesData>> => {
    const mutationOptions: UseMutationOptions<unknown, UserUpdateRolesError, Options<UserUpdateRolesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await userUpdateRoles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetAssignableRolesQueryKey = (options?: Options<UserGetAssignableRolesData>) => createQueryKey('userGetAssignableRoles', options);

export const userGetAssignableRolesOptions = (options?: Options<UserGetAssignableRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userGetAssignableRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetAssignableRolesQueryKey(options)
    });
};

export const userFindByUsernameQueryKey = (options: Options<UserFindByUsernameData>) => createQueryKey('userFindByUsername', options);

export const userFindByUsernameOptions = (options: Options<UserFindByUsernameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userFindByUsername({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userFindByUsernameQueryKey(options)
    });
};

export const userFindByEmailQueryKey = (options: Options<UserFindByEmailData>) => createQueryKey('userFindByEmail', options);

export const userFindByEmailOptions = (options: Options<UserFindByEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userFindByEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userFindByEmailQueryKey(options)
    });
};

export const userLookupFindByIdQueryKey = (options: Options<UserLookupFindByIdData>) => createQueryKey('userLookupFindById', options);

export const userLookupFindByIdOptions = (options: Options<UserLookupFindByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userLookupFindById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLookupFindByIdQueryKey(options)
    });
};

export const userLookupFindByUserNameQueryKey = (options: Options<UserLookupFindByUserNameData>) => createQueryKey('userLookupFindByUserName', options);

export const userLookupFindByUserNameOptions = (options: Options<UserLookupFindByUserNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userLookupFindByUserName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLookupFindByUserNameQueryKey(options)
    });
};

export const userLookupSearchQueryKey = (options?: Options<UserLookupSearchData>) => createQueryKey('userLookupSearch', options);

export const userLookupSearchOptions = (options?: Options<UserLookupSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userLookupSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLookupSearchQueryKey(options)
    });
};

export const userLookupGetCountQueryKey = (options?: Options<UserLookupGetCountData>) => createQueryKey('userLookupGetCount', options);

export const userLookupGetCountOptions = (options?: Options<UserLookupGetCountData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userLookupGetCount({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLookupGetCountQueryKey(options)
    });
};