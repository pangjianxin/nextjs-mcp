// This file is auto-generated by @hey-api/openapi-ts

export enum AutoFiltererEnumsCombineType {
    AND = 0,
    OR = 1
}

export enum SystemNetHttpStatusCode {
    CONTINUE = 100,
    SWITCHING_PROTOCOLS = 101,
    PROCESSING = 102,
    EARLY_HINTS = 103,
    OK = 200,
    CREATED = 201,
    ACCEPTED = 202,
    NON_AUTHORITATIVE_INFORMATION = 203,
    NO_CONTENT = 204,
    RESET_CONTENT = 205,
    PARTIAL_CONTENT = 206,
    MULTI_STATUS = 207,
    ALREADY_REPORTED = 208,
    IM_USED = 226,
    MULTIPLE_CHOICES = 300,
    AMBIGUOUS = 301,
    MOVED_PERMANENTLY = 302,
    MOVED = 303,
    FOUND = 304,
    REDIRECT = 305,
    SEE_OTHER = 306,
    REDIRECT_METHOD = 307,
    NOT_MODIFIED = 308,
    USE_PROXY = 400,
    UNUSED = 401,
    TEMPORARY_REDIRECT = 402,
    REDIRECT_KEEP_VERB = 403,
    PERMANENT_REDIRECT = 404,
    BAD_REQUEST = 405,
    UNAUTHORIZED = 406,
    PAYMENT_REQUIRED = 407,
    FORBIDDEN = 408,
    NOT_FOUND = 409,
    METHOD_NOT_ALLOWED = 410,
    NOT_ACCEPTABLE = 411,
    PROXY_AUTHENTICATION_REQUIRED = 412,
    REQUEST_TIMEOUT = 413,
    CONFLICT = 414,
    GONE = 415,
    LENGTH_REQUIRED = 416,
    PRECONDITION_FAILED = 417,
    REQUEST_ENTITY_TOO_LARGE = 421,
    REQUEST_URI_TOO_LONG = 422,
    UNSUPPORTED_MEDIA_TYPE = 423,
    REQUESTED_RANGE_NOT_SATISFIABLE = 424,
    EXPECTATION_FAILED = 426,
    MISDIRECTED_REQUEST = 428,
    UNPROCESSABLE_ENTITY = 429,
    UNPROCESSABLE_CONTENT = 431,
    LOCKED = 451,
    FAILED_DEPENDENCY = 500,
    UPGRADE_REQUIRED = 501,
    PRECONDITION_REQUIRED = 502,
    TOO_MANY_REQUESTS = 503,
    REQUEST_HEADER_FIELDS_TOO_LARGE = 504,
    UNAVAILABLE_FOR_LEGAL_REASONS = 505,
    INTERNAL_SERVER_ERROR = 506,
    NOT_IMPLEMENTED = 507,
    BAD_GATEWAY = 508,
    SERVICE_UNAVAILABLE = 510,
    GATEWAY_TIMEOUT = 511
}

export type VoloAbpAccountChangePasswordInput = {
    currentPassword?: string | null;
    newPassword: string;
};

export type VoloAbpAccountProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    isExternal?: boolean;
    hasPassword?: boolean;
    concurrencyStamp?: string | null;
};

export type VoloAbpAccountRegisterDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    emailAddress: string;
    password: string;
    appName: string;
};

export type VoloAbpAccountResetPasswordDto = {
    userId?: string;
    resetToken: string;
    password: string;
};

export type VoloAbpAccountSendPasswordResetCodeDto = {
    email: string;
    appName: string;
    returnUrl?: string | null;
    returnUrlHash?: string | null;
};

export type VoloAbpAccountUpdateProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    concurrencyStamp?: string | null;
};

export type VoloAbpAccountVerifyPasswordResetTokenInput = {
    userId?: string;
    resetToken: string;
};

export type VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult = {
    result?: VoloAbpAccountWebAreasAccountControllersModelsLoginResultType;
    readonly description?: string | null;
};

export enum VoloAbpAccountWebAreasAccountControllersModelsLoginResultType {
    SUCCESS = 1,
    INVALID_USER_NAME_OR_PASSWORD = 2,
    NOT_ALLOWED = 3,
    LOCKED_OUT = 4,
    REQUIRES_TWO_FACTOR = 5
}

export type VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo = {
    userNameOrEmailAddress: string;
    password: string;
    rememberMe?: boolean;
};

export type VoloAbpApplicationDtosListResultDtoOfIdentityRoleDto = {
    items?: Array<VoloAbpIdentityIdentityRoleDto> | null;
};

export type VoloAbpApplicationDtosListResultDtoOfUserData = {
    items?: Array<VoloAbpUsersUserData> | null;
};

export type VoloAbpApplicationDtosPagedResultDtoOfAuditLogDto = {
    items?: Array<WalleeMcpAuditLogsDtosAuditLogDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfCorporateInfoDto = {
    items?: Array<WalleeMcpCorporateInfosDtosCorporateInfoDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfCorporateInfoListDto = {
    items?: Array<WalleeMcpCorporateInfosDtosCorporateInfoListDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfCorporateReportDto = {
    items?: Array<WalleeMcpCorporateReportsDtosCorporateReportDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfIdentityRoleDto = {
    items?: Array<VoloAbpIdentityIdentityRoleDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfIdentityUserDto = {
    items?: Array<VoloAbpIdentityIdentityUserDto> | null;
    totalCount?: number;
};

export type VoloAbpApplicationDtosPagedResultDtoOfTenantDto = {
    items?: Array<VoloAbpTenantManagementTenantDto> | null;
    totalCount?: number;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationAuthConfigurationDto = {
    grantedPolicies?: {
        [key: string]: boolean;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationConfigurationDto = {
    localization?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto;
    auth?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationAuthConfigurationDto;
    setting?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationSettingConfigurationDto;
    currentUser?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentUserDto;
    features?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationFeatureConfigurationDto;
    globalFeatures?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationGlobalFeatureConfigurationDto;
    multiTenancy?: VoloAbpAspNetCoreMvcMultiTenancyMultiTenancyInfoDto;
    currentTenant?: VoloAbpAspNetCoreMvcMultiTenancyCurrentTenantDto;
    timing?: VoloAbpAspNetCoreMvcApplicationConfigurationsTimingDto;
    clock?: VoloAbpAspNetCoreMvcApplicationConfigurationsClockDto;
    objectExtensions?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingObjectExtensionsDto;
    extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationFeatureConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationGlobalFeatureConfigurationDto = {
    enabledFeatures?: Array<string> | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto = {
    values?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    resources?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto;
    } | null;
    languages?: Array<VoloAbpLocalizationLanguageInfo> | null;
    currentCulture?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto;
    defaultResourceName?: string | null;
    languagesMap?: {
        [key: string]: Array<VoloAbpNameValue>;
    } | null;
    languageFilesMap?: {
        [key: string]: Array<VoloAbpNameValue>;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationDto = {
    resources?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto;
    } | null;
    currentCulture?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto = {
    texts?: {
        [key: string]: string;
    } | null;
    baseResources?: Array<string> | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationSettingConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsClockDto = {
    kind?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto = {
    displayName?: string | null;
    englishName?: string | null;
    threeLetterIsoLanguageName?: string | null;
    twoLetterIsoLanguageName?: string | null;
    isRightToLeft?: boolean;
    cultureName?: string | null;
    name?: string | null;
    nativeName?: string | null;
    dateTimeFormat?: VoloAbpAspNetCoreMvcApplicationConfigurationsDateTimeFormatDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentUserDto = {
    isAuthenticated?: boolean;
    id?: string | null;
    tenantId?: string | null;
    impersonatorUserId?: string | null;
    impersonatorTenantId?: string | null;
    impersonatorUserName?: string | null;
    impersonatorTenantName?: string | null;
    userName?: string | null;
    name?: string | null;
    surName?: string | null;
    email?: string | null;
    emailVerified?: boolean;
    phoneNumber?: string | null;
    phoneNumberVerified?: boolean;
    roles?: Array<string> | null;
    sessionId?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsDateTimeFormatDto = {
    calendarAlgorithmType?: string | null;
    dateTimeFormatLong?: string | null;
    shortDatePattern?: string | null;
    fullDateTimePattern?: string | null;
    dateSeparator?: string | null;
    shortTimePattern?: string | null;
    longTimePattern?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsIanaTimeZone = {
    timeZoneName?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingEntityExtensionDto = {
    properties?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumDto = {
    fields?: Array<VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumFieldDto> | null;
    localizationResource?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumFieldDto = {
    name?: string | null;
    value?: unknown;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiCreateDto = {
    isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto = {
    onGet?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiGetDto;
    onCreate?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiCreateDto;
    onUpdate?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiUpdateDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiGetDto = {
    isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiUpdateDto = {
    isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto = {
    typeSimple?: string | null;
    config?: {
        [key: string]: unknown;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto = {
    type?: string | null;
    typeSimple?: string | null;
    displayName?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto;
    api?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto;
    ui?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto;
    policy?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPolicyDto;
    attributes?: Array<VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto> | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
    defaultValue?: unknown;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyGlobalFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPermissionPolicyDto = {
    permissionNames?: Array<string> | null;
    requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPolicyDto = {
    globalFeatures?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyGlobalFeaturePolicyDto;
    features?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyFeaturePolicyDto;
    permissions?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPermissionPolicyDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto = {
    onTable?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiTableDto;
    onCreateForm?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto;
    onEditForm?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto;
    lookup?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiLookupDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto = {
    isVisible?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiLookupDto = {
    url?: string | null;
    resultListPropertyName?: string | null;
    displayPropertyName?: string | null;
    valuePropertyName?: string | null;
    filterParamName?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiTableDto = {
    isVisible?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto = {
    name?: string | null;
    resource?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingModuleExtensionDto = {
    entities?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingEntityExtensionDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingObjectExtensionsDto = {
    modules?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingModuleExtensionDto;
    } | null;
    enums?: {
        [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumDto;
    } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone = {
    iana?: VoloAbpAspNetCoreMvcApplicationConfigurationsIanaTimeZone;
    windows?: VoloAbpAspNetCoreMvcApplicationConfigurationsWindowsTimeZone;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsTimingDto = {
    timeZone?: VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsWindowsTimeZone = {
    timeZoneId?: string | null;
};

export type VoloAbpAspNetCoreMvcMultiTenancyCurrentTenantDto = {
    id?: string | null;
    name?: string | null;
    isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcMultiTenancyFindTenantResultDto = {
    success?: boolean;
    tenantId?: string | null;
    name?: string | null;
    normalizedName?: string | null;
    isActive?: boolean;
};

export type VoloAbpAspNetCoreMvcMultiTenancyMultiTenancyInfoDto = {
    isEnabled?: boolean;
};

export enum VoloAbpAuditingEntityChangeType {
    CREATED = 0,
    UPDATED = 1,
    DELETED = 2
}

export type VoloAbpFeatureManagementFeatureDto = {
    name?: string | null;
    displayName?: string | null;
    value?: string | null;
    provider?: VoloAbpFeatureManagementFeatureProviderDto;
    description?: string | null;
    valueType?: VoloAbpValidationStringValuesIStringValueType;
    depth?: number;
    parentName?: string | null;
};

export type VoloAbpFeatureManagementFeatureGroupDto = {
    name?: string | null;
    displayName?: string | null;
    features?: Array<VoloAbpFeatureManagementFeatureDto> | null;
};

export type VoloAbpFeatureManagementFeatureProviderDto = {
    name?: string | null;
    key?: string | null;
};

export type VoloAbpFeatureManagementGetFeatureListResultDto = {
    groups?: Array<VoloAbpFeatureManagementFeatureGroupDto> | null;
};

export type VoloAbpFeatureManagementUpdateFeatureDto = {
    name?: string | null;
    value?: string | null;
};

export type VoloAbpFeatureManagementUpdateFeaturesDto = {
    features?: Array<VoloAbpFeatureManagementUpdateFeatureDto> | null;
};

export type VoloAbpHttpModelingActionApiDescriptionModel = {
    uniqueName?: string | null;
    name?: string | null;
    httpMethod?: string | null;
    url?: string | null;
    supportedVersions?: Array<string> | null;
    parametersOnMethod?: Array<VoloAbpHttpModelingMethodParameterApiDescriptionModel> | null;
    parameters?: Array<VoloAbpHttpModelingParameterApiDescriptionModel> | null;
    returnValue?: VoloAbpHttpModelingReturnValueApiDescriptionModel;
    allowAnonymous?: boolean | null;
    implementFrom?: string | null;
};

export type VoloAbpHttpModelingApplicationApiDescriptionModel = {
    modules?: {
        [key: string]: VoloAbpHttpModelingModuleApiDescriptionModel;
    } | null;
    types?: {
        [key: string]: VoloAbpHttpModelingTypeApiDescriptionModel;
    } | null;
};

export type VoloAbpHttpModelingControllerApiDescriptionModel = {
    controllerName?: string | null;
    controllerGroupName?: string | null;
    isRemoteService?: boolean;
    isIntegrationService?: boolean;
    apiVersion?: string | null;
    type?: string | null;
    interfaces?: Array<VoloAbpHttpModelingControllerInterfaceApiDescriptionModel> | null;
    actions?: {
        [key: string]: VoloAbpHttpModelingActionApiDescriptionModel;
    } | null;
};

export type VoloAbpHttpModelingControllerInterfaceApiDescriptionModel = {
    type?: string | null;
    name?: string | null;
    methods?: Array<VoloAbpHttpModelingInterfaceMethodApiDescriptionModel> | null;
};

export type VoloAbpHttpModelingInterfaceMethodApiDescriptionModel = {
    name?: string | null;
    parametersOnMethod?: Array<VoloAbpHttpModelingMethodParameterApiDescriptionModel> | null;
    returnValue?: VoloAbpHttpModelingReturnValueApiDescriptionModel;
};

export type VoloAbpHttpModelingMethodParameterApiDescriptionModel = {
    name?: string | null;
    typeAsString?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
};

export type VoloAbpHttpModelingModuleApiDescriptionModel = {
    rootPath?: string | null;
    remoteServiceName?: string | null;
    controllers?: {
        [key: string]: VoloAbpHttpModelingControllerApiDescriptionModel;
    } | null;
};

export type VoloAbpHttpModelingParameterApiDescriptionModel = {
    nameOnMethod?: string | null;
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
    constraintTypes?: Array<string> | null;
    bindingSourceId?: string | null;
    descriptorName?: string | null;
};

export type VoloAbpHttpModelingPropertyApiDescriptionModel = {
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isRequired?: boolean;
    minLength?: number | null;
    maxLength?: number | null;
    minimum?: string | null;
    maximum?: string | null;
    regex?: string | null;
};

export type VoloAbpHttpModelingReturnValueApiDescriptionModel = {
    type?: string | null;
    typeSimple?: string | null;
};

export type VoloAbpHttpModelingTypeApiDescriptionModel = {
    baseType?: string | null;
    isEnum?: boolean;
    enumNames?: Array<string> | null;
    enumValues?: Array<unknown> | null;
    genericArguments?: Array<string> | null;
    properties?: Array<VoloAbpHttpModelingPropertyApiDescriptionModel> | null;
};

export type VoloAbpHttpRemoteServiceErrorInfo = {
    code?: string | null;
    message?: string | null;
    details?: string | null;
    data?: {
        [key: string]: unknown;
    } | null;
    validationErrors?: Array<VoloAbpHttpRemoteServiceValidationErrorInfo> | null;
};

export type VoloAbpHttpRemoteServiceErrorResponse = {
    error?: VoloAbpHttpRemoteServiceErrorInfo;
};

export type VoloAbpHttpRemoteServiceValidationErrorInfo = {
    message?: string | null;
    members?: Array<string> | null;
};

export type VoloAbpIdentityIdentityRoleCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
};

export type VoloAbpIdentityIdentityRoleDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    isDefault?: boolean;
    isStatic?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
    creationTime?: string;
};

export type VoloAbpIdentityIdentityRoleUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
};

export type VoloAbpIdentityIdentityUserCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password: string;
};

export type VoloAbpIdentityIdentityUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    isDeleted?: boolean;
    deleterId?: string | null;
    deletionTime?: string | null;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    lockoutEnd?: string | null;
    concurrencyStamp?: string | null;
    entityVersion?: number;
    lastPasswordChangeTime?: string | null;
};

export type VoloAbpIdentityIdentityUserUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password?: string | null;
    concurrencyStamp?: string | null;
};

export type VoloAbpIdentityIdentityUserUpdateRolesDto = {
    roleNames: Array<string>;
};

export type VoloAbpLocalizationLanguageInfo = {
    cultureName?: string | null;
    uiCultureName?: string | null;
    displayName?: string | null;
    readonly twoLetterISOLanguageName?: string | null;
};

export type VoloAbpNameValue = {
    name?: string | null;
    value?: string | null;
};

export type VoloAbpPermissionManagementGetPermissionListResultDto = {
    entityDisplayName?: string | null;
    groups?: Array<VoloAbpPermissionManagementPermissionGroupDto> | null;
};

export type VoloAbpPermissionManagementPermissionGrantInfoDto = {
    name?: string | null;
    displayName?: string | null;
    parentName?: string | null;
    isGranted?: boolean;
    allowedProviders?: Array<string> | null;
    grantedProviders?: Array<VoloAbpPermissionManagementProviderInfoDto> | null;
};

export type VoloAbpPermissionManagementPermissionGroupDto = {
    name?: string | null;
    displayName?: string | null;
    displayNameKey?: string | null;
    displayNameResource?: string | null;
    permissions?: Array<VoloAbpPermissionManagementPermissionGrantInfoDto> | null;
};

export type VoloAbpPermissionManagementProviderInfoDto = {
    providerName?: string | null;
    providerKey?: string | null;
};

export type VoloAbpPermissionManagementUpdatePermissionDto = {
    name?: string | null;
    isGranted?: boolean;
};

export type VoloAbpPermissionManagementUpdatePermissionsDto = {
    permissions?: Array<VoloAbpPermissionManagementUpdatePermissionDto> | null;
};

export type VoloAbpSettingManagementEmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress?: string | null;
    defaultFromDisplayName?: string | null;
};

export type VoloAbpSettingManagementSendTestEmailInput = {
    senderEmailAddress: string;
    targetEmailAddress: string;
    subject: string;
    body?: string | null;
};

export type VoloAbpSettingManagementUpdateEmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress: string;
    defaultFromDisplayName: string;
};

export type VoloAbpTenantManagementTenantCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
};

export type VoloAbpTenantManagementTenantDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    concurrencyStamp?: string | null;
};

export type VoloAbpTenantManagementTenantUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    concurrencyStamp?: string | null;
};

export type VoloAbpUsersUserData = {
    id?: string;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    isActive?: boolean;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type VoloAbpValidationStringValuesIStringValueType = {
    readonly name?: string | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
    validator?: VoloAbpValidationStringValuesIValueValidator;
};

export type VoloAbpValidationStringValuesIValueValidator = {
    readonly name?: string | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
};

export type WalleeMcpAuditLogsDtosAuditLogActionDto = {
    id?: string;
    tenantId?: string | null;
    auditLogId?: string;
    serviceName?: string | null;
    methodName?: string | null;
    parameters?: string | null;
    executionTime?: string;
    executionDuration?: number;
    extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type WalleeMcpAuditLogsDtosAuditLogDto = {
    id?: string;
    applicationName?: string | null;
    userId?: string | null;
    userName?: string | null;
    tenantId?: string | null;
    tenantName?: string | null;
    impersonatorUserId?: string | null;
    impersonatorTenantId?: string | null;
    executionTime?: string;
    executionDuration?: number;
    clientIpAddress?: string | null;
    clientName?: string | null;
    clientId?: string | null;
    correlationId?: string | null;
    browserInfo?: string | null;
    httpMethod?: string | null;
    url?: string | null;
    exceptions?: string | null;
    comments?: string | null;
    httpStatusCode?: number | null;
    entityChanges?: Array<WalleeMcpAuditLogsDtosEntityChangeDto> | null;
    actions?: Array<WalleeMcpAuditLogsDtosAuditLogActionDto> | null;
};

export type WalleeMcpAuditLogsDtosEntityChangeDto = {
    id?: string;
    auditLogId?: string;
    tenantId?: string | null;
    changeTime?: string;
    changeType?: VoloAbpAuditingEntityChangeType;
    entityTenantId?: string | null;
    entityId?: string | null;
    entityTypeFullName?: string | null;
    propertyChanges?: Array<WalleeMcpAuditLogsDtosEntityPropertyChangeDto> | null;
    extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type WalleeMcpAuditLogsDtosEntityPropertyChangeDto = {
    id?: string;
    tenantId?: string | null;
    entityChangeId?: string;
    newValue?: string | null;
    originalValue?: string | null;
    propertyName?: string | null;
    propertyTypeFullName?: string | null;
};

export type WalleeMcpCorporateInfosDtosAdministrativeLicenseDto = {
    corporateInfoId?: string;
    decisionDate?: string | null;
    endDate?: string | null;
    licenseNumber?: string | null;
    licenceName?: string | null;
    licenceDepartment?: string | null;
    licenceContent?: string | null;
    source?: string | null;
    auditType?: string | null;
    legalPersonName?: string | null;
    areaCode?: string | null;
    dataUpdateTime?: string | null;
};

export type WalleeMcpCorporateInfosDtosBranchDto = {
    corporateInfoId?: string;
    logo?: string | null;
    alias?: string | null;
    estiblishTime?: string | null;
    regStatus?: string | null;
    legalPersonName?: string | null;
    externalSourceId?: number;
    category?: string | null;
    regCapital?: string | null;
    name?: string | null;
    base?: string | null;
};

export type WalleeMcpCorporateInfosDtosCapitalDto = {
    amomon?: string | null;
    time?: string | null;
    percent?: string | null;
    paymet?: string | null;
};

export type WalleeMcpCorporateInfosDtosChangeInfoDto = {
    corporateInfoId?: string;
    changeItem?: string | null;
    createTime?: string | null;
    contentBefore?: string | null;
    contentAfter?: string | null;
    changeTime?: string | null;
};

export type WalleeMcpCorporateInfosDtosCorporateInfoDto = {
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    staffNumRange?: string | null;
    fromTime?: string | null;
    type?: number;
    bondName?: string | null;
    externalSourceId?: number;
    isMicroEnt?: number;
    usedBondName?: string | null;
    regNumber?: string | null;
    percentileScore?: number;
    regCapital?: string | null;
    name?: string | null;
    regInstitute?: string | null;
    regLocation?: string | null;
    industry?: string | null;
    approvedTime?: string | null;
    socialStaffNum?: number | null;
    tags?: string | null;
    taxNumber?: string | null;
    businessScope?: string | null;
    property3?: string | null;
    alias?: string | null;
    orgNumber?: string | null;
    regStatus?: string | null;
    estiblishTime?: string | null;
    updateTimes?: string | null;
    bondType?: string | null;
    legalPersonName?: string | null;
    toTime?: string | null;
    actualCapital?: string | null;
    companyOrgType?: string | null;
    email?: string | null;
    websiteList?: string | null;
    phoneNumber?: string | null;
    base?: string | null;
    creditCode?: string | null;
    historyNames?: string | null;
    historyNameList?: Array<string> | null;
    bondNum?: string | null;
    regCapitalCurrency?: string | null;
    actualCapitalCurrency?: string | null;
    revokeDate?: string | null;
    revokeReason?: string | null;
    cancelDate?: string | null;
    cancelReason?: string | null;
    city?: string | null;
    district?: string | null;
    category?: string | null;
    categoryBig?: string | null;
    categoryMiddle?: string | null;
    categorySmall?: string | null;
    concurrencyStamp?: string | null;
    staffs?: Array<WalleeMcpCorporateInfosDtosStaffDto> | null;
    branches?: Array<WalleeMcpCorporateInfosDtosBranchDto> | null;
    investments?: Array<WalleeMcpCorporateInfosDtosInvestmentDto> | null;
    changeInfos?: Array<WalleeMcpCorporateInfosDtosChangeInfoDto> | null;
    administrativeLicenses?: Array<WalleeMcpCorporateInfosDtosAdministrativeLicenseDto> | null;
    shareholders?: Array<WalleeMcpCorporateInfosDtosShareholderDto> | null;
};

export type WalleeMcpCorporateInfosDtosCorporateInfoGetListInput = {
    combineWith?: AutoFiltererEnumsCombineType;
    filter?: string | null;
    skipCount?: number;
    maxResultCount?: number;
    sorting?: string | null;
};

export type WalleeMcpCorporateInfosDtosCorporateInfoListDto = {
    id?: string;
    name?: string | null;
    creditCode?: string | null;
    regCapital?: string | null;
    legalPersonName?: string | null;
    estiblishTime?: string | null;
    percentileScore?: number;
    regLocation?: string | null;
};

export type WalleeMcpCorporateInfosDtosInvestmentDto = {
    corporateInfoId?: string;
    orgType?: string | null;
    businessScope?: string | null;
    percent?: string | null;
    regStatus?: string | null;
    estiblishTime?: string | null;
    legalPersonName?: string | null;
    type?: number;
    amount?: number;
    externalSourceId?: number;
    category?: string | null;
    regCapital?: string | null;
    name?: string | null;
    base?: string | null;
    creditCode?: string | null;
    personType?: number;
    alias?: string | null;
    amountSuffix?: string | null;
};

export type WalleeMcpCorporateInfosDtosShareholderDto = {
    corporateInfoId?: string;
    externalSourceId?: number | null;
    cgid?: number | null;
    hcgid?: string | null;
    logo?: string | null;
    name?: string | null;
    alias?: string | null;
    type?: number;
    capitalActl?: Array<WalleeMcpCorporateInfosDtosCapitalDto> | null;
    capital?: Array<WalleeMcpCorporateInfosDtosCapitalDto> | null;
};

export type WalleeMcpCorporateInfosDtosStaffDto = {
    corporateInfoId?: string;
    externalSourceId?: number | null;
    hcgid?: string | null;
    typeJoin?: Array<string> | null;
    logo?: string | null;
    type?: number;
    name?: string | null;
};

export type WalleeMcpCorporateInfosDtosUpdateItemsDto = {
    creditCode?: string | null;
};

export enum WalleeMcpCorporateReportsCorporateReportType {
    企业基础信息 = 1
}

export type WalleeMcpCorporateReportsDtosCorporateReportDto = {
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    readonly blobId?: string | null;
    readonly documentName?: string | null;
    readonly downloadCount?: number;
    readonly mediaType?: string | null;
    readonly contentLength?: number;
    readonly documentGenerated?: boolean;
    type?: WalleeMcpCorporateReportsCorporateReportType;
    companyUniscId?: string | null;
    companyName?: string | null;
    readonly transmissionHistories?: Array<WalleeMcpCorporateReportsDtosTransmissionHistoryDto> | null;
};

export type WalleeMcpCorporateReportsDtosCreateCorporateReportDto = {
    type?: WalleeMcpCorporateReportsCorporateReportType;
    companyName?: string | null;
    companyUniscId?: string | null;
    email?: string | null;
};

export type WalleeMcpCorporateReportsDtosTransmissionHistoryDto = {
    userId?: string | null;
    email?: string | null;
    date?: string | null;
};

export type AbpApiDefinitionGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeTypes?: boolean;
    };
    url: '/api/abp/api-definition';
};

export type AbpApiDefinitionGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AbpApiDefinitionGetError = AbpApiDefinitionGetErrors[keyof AbpApiDefinitionGetErrors];

export type AbpApiDefinitionGetResponses = {
    /**
     * OK
     */
    200: VoloAbpHttpModelingApplicationApiDescriptionModel;
};

export type AbpApiDefinitionGetResponse = AbpApiDefinitionGetResponses[keyof AbpApiDefinitionGetResponses];

export type AbpApplicationConfigurationGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeLocalizationResources?: boolean;
    };
    url: '/api/abp/application-configuration';
};

export type AbpApplicationConfigurationGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AbpApplicationConfigurationGetError = AbpApplicationConfigurationGetErrors[keyof AbpApplicationConfigurationGetErrors];

export type AbpApplicationConfigurationGetResponses = {
    /**
     * OK
     */
    200: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationConfigurationDto;
};

export type AbpApplicationConfigurationGetResponse = AbpApplicationConfigurationGetResponses[keyof AbpApplicationConfigurationGetResponses];

export type AbpApplicationLocalizationGetData = {
    body?: never;
    path?: never;
    query: {
        CultureName: string;
        OnlyDynamics?: boolean;
    };
    url: '/api/abp/application-localization';
};

export type AbpApplicationLocalizationGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AbpApplicationLocalizationGetError = AbpApplicationLocalizationGetErrors[keyof AbpApplicationLocalizationGetErrors];

export type AbpApplicationLocalizationGetResponses = {
    /**
     * OK
     */
    200: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationDto;
};

export type AbpApplicationLocalizationGetResponse = AbpApplicationLocalizationGetResponses[keyof AbpApplicationLocalizationGetResponses];

export type AbpTenantFindTenantByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-name/{name}';
};

export type AbpTenantFindTenantByNameErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByNameError = AbpTenantFindTenantByNameErrors[keyof AbpTenantFindTenantByNameErrors];

export type AbpTenantFindTenantByNameResponses = {
    /**
     * OK
     */
    200: VoloAbpAspNetCoreMvcMultiTenancyFindTenantResultDto;
};

export type AbpTenantFindTenantByNameResponse = AbpTenantFindTenantByNameResponses[keyof AbpTenantFindTenantByNameResponses];

export type AbpTenantFindTenantByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-id/{id}';
};

export type AbpTenantFindTenantByIdErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByIdError = AbpTenantFindTenantByIdErrors[keyof AbpTenantFindTenantByIdErrors];

export type AbpTenantFindTenantByIdResponses = {
    /**
     * OK
     */
    200: VoloAbpAspNetCoreMvcMultiTenancyFindTenantResultDto;
};

export type AbpTenantFindTenantByIdResponse = AbpTenantFindTenantByIdResponses[keyof AbpTenantFindTenantByIdResponses];

export type AccountRegisterData = {
    body?: VoloAbpAccountRegisterDto;
    path?: never;
    query?: never;
    url: '/api/account/register';
};

export type AccountRegisterErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AccountRegisterError = AccountRegisterErrors[keyof AccountRegisterErrors];

export type AccountRegisterResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type AccountRegisterResponse = AccountRegisterResponses[keyof AccountRegisterResponses];

export type AccountSendPasswordResetCodeData = {
    body?: VoloAbpAccountSendPasswordResetCodeDto;
    path?: never;
    query?: never;
    url: '/api/account/send-password-reset-code';
};

export type AccountSendPasswordResetCodeErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AccountSendPasswordResetCodeError = AccountSendPasswordResetCodeErrors[keyof AccountSendPasswordResetCodeErrors];

export type AccountSendPasswordResetCodeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AccountVerifyPasswordResetTokenData = {
    body?: VoloAbpAccountVerifyPasswordResetTokenInput;
    path?: never;
    query?: never;
    url: '/api/account/verify-password-reset-token';
};

export type AccountVerifyPasswordResetTokenErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AccountVerifyPasswordResetTokenError = AccountVerifyPasswordResetTokenErrors[keyof AccountVerifyPasswordResetTokenErrors];

export type AccountVerifyPasswordResetTokenResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type AccountVerifyPasswordResetTokenResponse = AccountVerifyPasswordResetTokenResponses[keyof AccountVerifyPasswordResetTokenResponses];

export type AccountResetPasswordData = {
    body?: VoloAbpAccountResetPasswordDto;
    path?: never;
    query?: never;
    url: '/api/account/reset-password';
};

export type AccountResetPasswordErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AccountResetPasswordError = AccountResetPasswordErrors[keyof AccountResetPasswordErrors];

export type AccountResetPasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AuditLogGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/audit-log/{id}';
};

export type AuditLogGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AuditLogGetError = AuditLogGetErrors[keyof AuditLogGetErrors];

export type AuditLogGetResponses = {
    /**
     * OK
     */
    200: WalleeMcpAuditLogsDtosAuditLogDto;
};

export type AuditLogGetResponse = AuditLogGetResponses[keyof AuditLogGetResponses];

export type AuditLogGetListData = {
    body?: never;
    path?: never;
    query?: {
        StartTime?: string;
        EndTime?: string;
        UserId?: string;
        ClientId?: string;
        HttpMethod?: string;
        Url?: string;
        UserName?: string;
        ApplicationName?: string;
        CorrelationId?: string;
        MaxExecutionDuration?: number;
        MinExecutionDuration?: number;
        HasException?: boolean;
        HttpStatusCode?: SystemNetHttpStatusCode;
        IncludeDetails?: boolean;
        ClientIpAddress?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/admin/audit-log';
};

export type AuditLogGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AuditLogGetListError = AuditLogGetListErrors[keyof AuditLogGetListErrors];

export type AuditLogGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfAuditLogDto;
};

export type AuditLogGetListResponse = AuditLogGetListResponses[keyof AuditLogGetListResponses];

export type AuditLogGetList2Data = {
    body?: never;
    path?: never;
    query?: {
        StartTime?: string;
        EndTime?: string;
        UserId?: string;
        ClientId?: string;
        HttpMethod?: string;
        Url?: string;
        UserName?: string;
        ApplicationName?: string;
        CorrelationId?: string;
        MaxExecutionDuration?: number;
        MinExecutionDuration?: number;
        HasException?: boolean;
        HttpStatusCode?: SystemNetHttpStatusCode;
        IncludeDetails?: boolean;
        ClientIpAddress?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/app/audit-log';
};

export type AuditLogGetList2Errors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AuditLogGetList2Error = AuditLogGetList2Errors[keyof AuditLogGetList2Errors];

export type AuditLogGetList2Responses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfAuditLogDto;
};

export type AuditLogGetList2Response = AuditLogGetList2Responses[keyof AuditLogGetList2Responses];

export type AuditLogGet2Data = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/app/audit-log/{id}';
};

export type AuditLogGet2Errors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type AuditLogGet2Error = AuditLogGet2Errors[keyof AuditLogGet2Errors];

export type AuditLogGet2Responses = {
    /**
     * OK
     */
    200: WalleeMcpAuditLogsDtosAuditLogDto;
};

export type AuditLogGet2Response = AuditLogGet2Responses[keyof AuditLogGet2Responses];

export type CorporateInfoProjectData = {
    body?: WalleeMcpCorporateInfosDtosCorporateInfoGetListInput;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/project';
};

export type CorporateInfoProjectErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoProjectError = CorporateInfoProjectErrors[keyof CorporateInfoProjectErrors];

export type CorporateInfoProjectResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfCorporateInfoListDto;
};

export type CorporateInfoProjectResponse = CorporateInfoProjectResponses[keyof CorporateInfoProjectResponses];

export type CorporateInfoFindByCreditCodeData = {
    body?: never;
    path?: never;
    query?: {
        creditCode?: string;
    };
    url: '/api/app/corporate-info/find-by-credit-code';
};

export type CorporateInfoFindByCreditCodeErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoFindByCreditCodeError = CorporateInfoFindByCreditCodeErrors[keyof CorporateInfoFindByCreditCodeErrors];

export type CorporateInfoFindByCreditCodeResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoFindByCreditCodeResponse = CorporateInfoFindByCreditCodeResponses[keyof CorporateInfoFindByCreditCodeResponses];

export type CorporateInfoGetOrAddCorporateInfoData = {
    body?: never;
    path?: never;
    query?: {
        CreditCode?: string;
    };
    url: '/api/app/corporate-info/or-add-corporate-info';
};

export type CorporateInfoGetOrAddCorporateInfoErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoGetOrAddCorporateInfoError = CorporateInfoGetOrAddCorporateInfoErrors[keyof CorporateInfoGetOrAddCorporateInfoErrors];

export type CorporateInfoGetOrAddCorporateInfoResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoGetOrAddCorporateInfoResponse = CorporateInfoGetOrAddCorporateInfoResponses[keyof CorporateInfoGetOrAddCorporateInfoResponses];

export type CorporateInfoUpdateStaffsData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/staffs';
};

export type CorporateInfoUpdateStaffsErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateStaffsError = CorporateInfoUpdateStaffsErrors[keyof CorporateInfoUpdateStaffsErrors];

export type CorporateInfoUpdateStaffsResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateStaffsResponse = CorporateInfoUpdateStaffsResponses[keyof CorporateInfoUpdateStaffsResponses];

export type CorporateInfoUpdateShareholdersData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/shareholders';
};

export type CorporateInfoUpdateShareholdersErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateShareholdersError = CorporateInfoUpdateShareholdersErrors[keyof CorporateInfoUpdateShareholdersErrors];

export type CorporateInfoUpdateShareholdersResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateShareholdersResponse = CorporateInfoUpdateShareholdersResponses[keyof CorporateInfoUpdateShareholdersResponses];

export type CorporateInfoUpdateBranchesData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/branches';
};

export type CorporateInfoUpdateBranchesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateBranchesError = CorporateInfoUpdateBranchesErrors[keyof CorporateInfoUpdateBranchesErrors];

export type CorporateInfoUpdateBranchesResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateBranchesResponse = CorporateInfoUpdateBranchesResponses[keyof CorporateInfoUpdateBranchesResponses];

export type CorporateInfoUpdateInvestmentsData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/investments';
};

export type CorporateInfoUpdateInvestmentsErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateInvestmentsError = CorporateInfoUpdateInvestmentsErrors[keyof CorporateInfoUpdateInvestmentsErrors];

export type CorporateInfoUpdateInvestmentsResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateInvestmentsResponse = CorporateInfoUpdateInvestmentsResponses[keyof CorporateInfoUpdateInvestmentsResponses];

export type CorporateInfoUpdateChangeInfosData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/change-infos';
};

export type CorporateInfoUpdateChangeInfosErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateChangeInfosError = CorporateInfoUpdateChangeInfosErrors[keyof CorporateInfoUpdateChangeInfosErrors];

export type CorporateInfoUpdateChangeInfosResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateChangeInfosResponse = CorporateInfoUpdateChangeInfosResponses[keyof CorporateInfoUpdateChangeInfosResponses];

export type CorporateInfoUpdateAdministrativeLicensesData = {
    body?: WalleeMcpCorporateInfosDtosUpdateItemsDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-info/administrative-licenses';
};

export type CorporateInfoUpdateAdministrativeLicensesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoUpdateAdministrativeLicensesError = CorporateInfoUpdateAdministrativeLicensesErrors[keyof CorporateInfoUpdateAdministrativeLicensesErrors];

export type CorporateInfoUpdateAdministrativeLicensesResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoUpdateAdministrativeLicensesResponse = CorporateInfoUpdateAdministrativeLicensesResponses[keyof CorporateInfoUpdateAdministrativeLicensesResponses];

export type CorporateInfoGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/app/corporate-info/{id}';
};

export type CorporateInfoGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoGetError = CorporateInfoGetErrors[keyof CorporateInfoGetErrors];

export type CorporateInfoGetResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateInfosDtosCorporateInfoDto;
};

export type CorporateInfoGetResponse = CorporateInfoGetResponses[keyof CorporateInfoGetResponses];

export type CorporateInfoGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        Sorting?: string;
        CombineWith?: AutoFiltererEnumsCombineType;
    };
    url: '/api/app/corporate-info';
};

export type CorporateInfoGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateInfoGetListError = CorporateInfoGetListErrors[keyof CorporateInfoGetListErrors];

export type CorporateInfoGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfCorporateInfoDto;
};

export type CorporateInfoGetListResponse = CorporateInfoGetListResponses[keyof CorporateInfoGetListResponses];

export type CorporateReportGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        CreatorId?: string;
        Type?: WalleeMcpCorporateReportsCorporateReportType;
        SkipCount?: number;
        MaxResultCount?: number;
        Sorting?: string;
        CombineWith?: AutoFiltererEnumsCombineType;
    };
    url: '/api/app/corporate-report';
};

export type CorporateReportGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateReportGetListError = CorporateReportGetListErrors[keyof CorporateReportGetListErrors];

export type CorporateReportGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfCorporateReportDto;
};

export type CorporateReportGetListResponse = CorporateReportGetListResponses[keyof CorporateReportGetListResponses];

export type CorporateReportCreateData = {
    body?: WalleeMcpCorporateReportsDtosCreateCorporateReportDto;
    path?: never;
    query?: never;
    url: '/api/app/corporate-report';
};

export type CorporateReportCreateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateReportCreateError = CorporateReportCreateErrors[keyof CorporateReportCreateErrors];

export type CorporateReportCreateResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateReportsDtosCorporateReportDto;
};

export type CorporateReportCreateResponse = CorporateReportCreateResponses[keyof CorporateReportCreateResponses];

export type CorporateReportGetDownloadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/app/corporate-report/{id}/download';
};

export type CorporateReportGetDownloadErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateReportGetDownloadError = CorporateReportGetDownloadErrors[keyof CorporateReportGetDownloadErrors];

export type CorporateReportGetDownloadResponses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type CorporateReportGetDownloadResponse = CorporateReportGetDownloadResponses[keyof CorporateReportGetDownloadResponses];

export type CorporateReportGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/app/corporate-report/{id}';
};

export type CorporateReportGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type CorporateReportGetError = CorporateReportGetErrors[keyof CorporateReportGetErrors];

export type CorporateReportGetResponses = {
    /**
     * OK
     */
    200: WalleeMcpCorporateReportsDtosCorporateReportDto;
};

export type CorporateReportGetResponse = CorporateReportGetResponses[keyof CorporateReportGetResponses];

export type DynamicClaimsRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/dynamic-claims/refresh';
};

export type DynamicClaimsRefreshErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type DynamicClaimsRefreshError = DynamicClaimsRefreshErrors[keyof DynamicClaimsRefreshErrors];

export type DynamicClaimsRefreshResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type EmailSettingsGetError = EmailSettingsGetErrors[keyof EmailSettingsGetErrors];

export type EmailSettingsGetResponses = {
    /**
     * OK
     */
    200: VoloAbpSettingManagementEmailSettingsDto;
};

export type EmailSettingsGetResponse = EmailSettingsGetResponses[keyof EmailSettingsGetResponses];

export type EmailSettingsUpdateData = {
    body?: VoloAbpSettingManagementUpdateEmailSettingsDto;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type EmailSettingsUpdateError = EmailSettingsUpdateErrors[keyof EmailSettingsUpdateErrors];

export type EmailSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsSendTestEmailData = {
    body?: VoloAbpSettingManagementSendTestEmailInput;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing/send-test-email';
};

export type EmailSettingsSendTestEmailErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type EmailSettingsSendTestEmailError = EmailSettingsSendTestEmailErrors[keyof EmailSettingsSendTestEmailErrors];

export type EmailSettingsSendTestEmailResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesDeleteData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesDeleteErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type FeaturesDeleteError = FeaturesDeleteErrors[keyof FeaturesDeleteErrors];

export type FeaturesDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type FeaturesGetError = FeaturesGetErrors[keyof FeaturesGetErrors];

export type FeaturesGetResponses = {
    /**
     * OK
     */
    200: VoloAbpFeatureManagementGetFeatureListResultDto;
};

export type FeaturesGetResponse = FeaturesGetResponses[keyof FeaturesGetResponses];

export type FeaturesUpdateData = {
    body?: VoloAbpFeatureManagementUpdateFeaturesDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type FeaturesUpdateError = FeaturesUpdateErrors[keyof FeaturesUpdateErrors];

export type FeaturesUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LoginLoginData = {
    body?: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/login';
};

export type LoginLoginErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type LoginLoginError = LoginLoginErrors[keyof LoginLoginErrors];

export type LoginLoginResponses = {
    /**
     * OK
     */
    200: VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult;
};

export type LoginLoginResponse = LoginLoginResponses[keyof LoginLoginResponses];

export type LoginLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/logout';
};

export type LoginLogoutErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type LoginLogoutError = LoginLogoutErrors[keyof LoginLogoutErrors];

export type LoginLogoutResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LoginCheckPasswordData = {
    body?: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/check-password';
};

export type LoginCheckPasswordErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type LoginCheckPasswordError = LoginCheckPasswordErrors[keyof LoginCheckPasswordErrors];

export type LoginCheckPasswordResponses = {
    /**
     * OK
     */
    200: VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult;
};

export type LoginCheckPasswordResponse = LoginCheckPasswordResponses[keyof LoginCheckPasswordResponses];

export type PermissionsGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type PermissionsGetError = PermissionsGetErrors[keyof PermissionsGetErrors];

export type PermissionsGetResponses = {
    /**
     * OK
     */
    200: VoloAbpPermissionManagementGetPermissionListResultDto;
};

export type PermissionsGetResponse = PermissionsGetResponses[keyof PermissionsGetResponses];

export type PermissionsUpdateData = {
    body?: VoloAbpPermissionManagementUpdatePermissionsDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type PermissionsUpdateError = PermissionsUpdateErrors[keyof PermissionsUpdateErrors];

export type PermissionsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type ProfileGetError = ProfileGetErrors[keyof ProfileGetErrors];

export type ProfileGetResponses = {
    /**
     * OK
     */
    200: VoloAbpAccountProfileDto;
};

export type ProfileGetResponse = ProfileGetResponses[keyof ProfileGetResponses];

export type ProfileUpdateData = {
    body?: VoloAbpAccountUpdateProfileDto;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type ProfileUpdateError = ProfileUpdateErrors[keyof ProfileUpdateErrors];

export type ProfileUpdateResponses = {
    /**
     * OK
     */
    200: VoloAbpAccountProfileDto;
};

export type ProfileUpdateResponse = ProfileUpdateResponses[keyof ProfileUpdateResponses];

export type ProfileChangePasswordData = {
    body?: VoloAbpAccountChangePasswordInput;
    path?: never;
    query?: never;
    url: '/api/account/my-profile/change-password';
};

export type ProfileChangePasswordErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type ProfileChangePasswordError = ProfileChangePasswordErrors[keyof ProfileChangePasswordErrors];

export type ProfileChangePasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetAllListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/roles/all';
};

export type RoleGetAllListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleGetAllListError = RoleGetAllListErrors[keyof RoleGetAllListErrors];

export type RoleGetAllListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosListResultDtoOfIdentityRoleDto;
};

export type RoleGetAllListResponse = RoleGetAllListResponses[keyof RoleGetAllListResponses];

export type RoleGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/roles';
};

export type RoleGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleGetListError = RoleGetListErrors[keyof RoleGetListErrors];

export type RoleGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfIdentityRoleDto;
};

export type RoleGetListResponse = RoleGetListResponses[keyof RoleGetListResponses];

export type RoleCreateData = {
    body?: VoloAbpIdentityIdentityRoleCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/roles';
};

export type RoleCreateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleCreateError = RoleCreateErrors[keyof RoleCreateErrors];

export type RoleCreateResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityRoleDto;
};

export type RoleCreateResponse = RoleCreateResponses[keyof RoleCreateResponses];

export type RoleDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleDeleteErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleDeleteError = RoleDeleteErrors[keyof RoleDeleteErrors];

export type RoleDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleGetError = RoleGetErrors[keyof RoleGetErrors];

export type RoleGetResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityRoleDto;
};

export type RoleGetResponse = RoleGetResponses[keyof RoleGetResponses];

export type RoleUpdateData = {
    body?: VoloAbpIdentityIdentityRoleUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type RoleUpdateError = RoleUpdateErrors[keyof RoleUpdateErrors];

export type RoleUpdateResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityRoleDto;
};

export type RoleUpdateResponse = RoleUpdateResponses[keyof RoleUpdateResponses];

export type TenantDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantDeleteErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantDeleteError = TenantDeleteErrors[keyof TenantDeleteErrors];

export type TenantDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantGetError = TenantGetErrors[keyof TenantGetErrors];

export type TenantGetResponses = {
    /**
     * OK
     */
    200: VoloAbpTenantManagementTenantDto;
};

export type TenantGetResponse = TenantGetResponses[keyof TenantGetResponses];

export type TenantUpdateData = {
    body?: VoloAbpTenantManagementTenantUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
    /**
     * OK
     */
    200: VoloAbpTenantManagementTenantDto;
};

export type TenantUpdateResponse = TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/multi-tenancy/tenants';
};

export type TenantGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantGetListError = TenantGetListErrors[keyof TenantGetListErrors];

export type TenantGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfTenantDto;
};

export type TenantGetListResponse = TenantGetListResponses[keyof TenantGetListResponses];

export type TenantCreateData = {
    body?: VoloAbpTenantManagementTenantCreateDto;
    path?: never;
    query?: never;
    url: '/api/multi-tenancy/tenants';
};

export type TenantCreateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
    /**
     * OK
     */
    200: VoloAbpTenantManagementTenantDto;
};

export type TenantCreateResponse = TenantCreateResponses[keyof TenantCreateResponses];

export type TenantDeleteDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantDeleteDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantDeleteDefaultConnectionStringError = TenantDeleteDefaultConnectionStringErrors[keyof TenantDeleteDefaultConnectionStringErrors];

export type TenantDeleteDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantGetDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantGetDefaultConnectionStringError = TenantGetDefaultConnectionStringErrors[keyof TenantGetDefaultConnectionStringErrors];

export type TenantGetDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: string;
};

export type TenantGetDefaultConnectionStringResponse = TenantGetDefaultConnectionStringResponses[keyof TenantGetDefaultConnectionStringResponses];

export type TenantUpdateDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        defaultConnectionString?: string;
    };
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantUpdateDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TenantUpdateDefaultConnectionStringError = TenantUpdateDefaultConnectionStringErrors[keyof TenantUpdateDefaultConnectionStringErrors];

export type TenantUpdateDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetError = TimeZoneSettingsGetErrors[keyof TimeZoneSettingsGetErrors];

export type TimeZoneSettingsGetResponses = {
    /**
     * OK
     */
    200: string;
};

export type TimeZoneSettingsGetResponse = TimeZoneSettingsGetResponses[keyof TimeZoneSettingsGetResponses];

export type TimeZoneSettingsUpdateData = {
    body?: never;
    path?: never;
    query?: {
        timezone?: string;
    };
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TimeZoneSettingsUpdateError = TimeZoneSettingsUpdateErrors[keyof TimeZoneSettingsUpdateErrors];

export type TimeZoneSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetTimezonesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone/timezones';
};

export type TimeZoneSettingsGetTimezonesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetTimezonesError = TimeZoneSettingsGetTimezonesErrors[keyof TimeZoneSettingsGetTimezonesErrors];

export type TimeZoneSettingsGetTimezonesResponses = {
    /**
     * OK
     */
    200: Array<VoloAbpNameValue>;
};

export type TimeZoneSettingsGetTimezonesResponse = TimeZoneSettingsGetTimezonesResponses[keyof TimeZoneSettingsGetTimezonesResponses];

export type UserDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserDeleteErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserDeleteError = UserDeleteErrors[keyof UserDeleteErrors];

export type UserDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserGetErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserGetError = UserGetErrors[keyof UserGetErrors];

export type UserGetResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type UserGetResponse = UserGetResponses[keyof UserGetResponses];

export type UserUpdateData = {
    body?: VoloAbpIdentityIdentityUserUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserUpdateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserUpdateError = UserUpdateErrors[keyof UserUpdateErrors];

export type UserUpdateResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type UserUpdateResponse = UserUpdateResponses[keyof UserUpdateResponses];

export type UserGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/users';
};

export type UserGetListErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserGetListError = UserGetListErrors[keyof UserGetListErrors];

export type UserGetListResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosPagedResultDtoOfIdentityUserDto;
};

export type UserGetListResponse = UserGetListResponses[keyof UserGetListResponses];

export type UserCreateData = {
    body?: VoloAbpIdentityIdentityUserCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/users';
};

export type UserCreateErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserGetRolesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserGetRolesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserGetRolesError = UserGetRolesErrors[keyof UserGetRolesErrors];

export type UserGetRolesResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosListResultDtoOfIdentityRoleDto;
};

export type UserGetRolesResponse = UserGetRolesResponses[keyof UserGetRolesResponses];

export type UserUpdateRolesData = {
    body?: VoloAbpIdentityIdentityUserUpdateRolesDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserUpdateRolesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserUpdateRolesError = UserUpdateRolesErrors[keyof UserUpdateRolesErrors];

export type UserUpdateRolesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetAssignableRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/users/assignable-roles';
};

export type UserGetAssignableRolesErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserGetAssignableRolesError = UserGetAssignableRolesErrors[keyof UserGetAssignableRolesErrors];

export type UserGetAssignableRolesResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosListResultDtoOfIdentityRoleDto;
};

export type UserGetAssignableRolesResponse = UserGetAssignableRolesResponses[keyof UserGetAssignableRolesResponses];

export type UserFindByUsernameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/by-username/{userName}';
};

export type UserFindByUsernameErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserFindByUsernameError = UserFindByUsernameErrors[keyof UserFindByUsernameErrors];

export type UserFindByUsernameResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type UserFindByUsernameResponse = UserFindByUsernameResponses[keyof UserFindByUsernameResponses];

export type UserFindByEmailData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/identity/users/by-email/{email}';
};

export type UserFindByEmailErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserFindByEmailError = UserFindByEmailErrors[keyof UserFindByEmailErrors];

export type UserFindByEmailResponses = {
    /**
     * OK
     */
    200: VoloAbpIdentityIdentityUserDto;
};

export type UserFindByEmailResponse = UserFindByEmailResponses[keyof UserFindByEmailResponses];

export type UserLookupFindByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/{id}';
};

export type UserLookupFindByIdErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserLookupFindByIdError = UserLookupFindByIdErrors[keyof UserLookupFindByIdErrors];

export type UserLookupFindByIdResponses = {
    /**
     * OK
     */
    200: VoloAbpUsersUserData;
};

export type UserLookupFindByIdResponse = UserLookupFindByIdResponses[keyof UserLookupFindByIdResponses];

export type UserLookupFindByUserNameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/by-username/{userName}';
};

export type UserLookupFindByUserNameErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserLookupFindByUserNameError = UserLookupFindByUserNameErrors[keyof UserLookupFindByUserNameErrors];

export type UserLookupFindByUserNameResponses = {
    /**
     * OK
     */
    200: VoloAbpUsersUserData;
};

export type UserLookupFindByUserNameResponse = UserLookupFindByUserNameResponses[keyof UserLookupFindByUserNameResponses];

export type UserLookupSearchData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/users/lookup/search';
};

export type UserLookupSearchErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserLookupSearchError = UserLookupSearchErrors[keyof UserLookupSearchErrors];

export type UserLookupSearchResponses = {
    /**
     * OK
     */
    200: VoloAbpApplicationDtosListResultDtoOfUserData;
};

export type UserLookupSearchResponse = UserLookupSearchResponses[keyof UserLookupSearchResponses];

export type UserLookupGetCountData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
    };
    url: '/api/identity/users/lookup/count';
};

export type UserLookupGetCountErrors = {
    /**
     * Bad Request
     */
    400: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: VoloAbpHttpRemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type UserLookupGetCountError = UserLookupGetCountErrors[keyof UserLookupGetCountErrors];

export type UserLookupGetCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type UserLookupGetCountResponse = UserLookupGetCountResponses[keyof UserLookupGetCountResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:44390' | (string & {});
};