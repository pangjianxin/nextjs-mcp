// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AbpApiDefinitionGetData, AbpApiDefinitionGetResponses, AbpApiDefinitionGetErrors, AbpApplicationConfigurationGetData, AbpApplicationConfigurationGetResponses, AbpApplicationConfigurationGetErrors, AbpApplicationLocalizationGetData, AbpApplicationLocalizationGetResponses, AbpApplicationLocalizationGetErrors, AbpTenantFindTenantByNameData, AbpTenantFindTenantByNameResponses, AbpTenantFindTenantByNameErrors, AbpTenantFindTenantByIdData, AbpTenantFindTenantByIdResponses, AbpTenantFindTenantByIdErrors, AccountRegisterData, AccountRegisterResponses, AccountRegisterErrors, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeResponses, AccountSendPasswordResetCodeErrors, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenResponses, AccountVerifyPasswordResetTokenErrors, AccountResetPasswordData, AccountResetPasswordResponses, AccountResetPasswordErrors, AuditLogGetData, AuditLogGetResponses, AuditLogGetErrors, AuditLogGetListData, AuditLogGetListResponses, AuditLogGetListErrors, AuditLogGetList2Data, AuditLogGetList2Responses, AuditLogGetList2Errors, AuditLogGet2Data, AuditLogGet2Responses, AuditLogGet2Errors, CorporateInfoProjectData, CorporateInfoProjectResponses, CorporateInfoProjectErrors, CorporateInfoFindByCreditCodeData, CorporateInfoFindByCreditCodeResponses, CorporateInfoFindByCreditCodeErrors, CorporateInfoGetOrAddCorporateInfoData, CorporateInfoGetOrAddCorporateInfoResponses, CorporateInfoGetOrAddCorporateInfoErrors, CorporateInfoUpdateStaffsData, CorporateInfoUpdateStaffsResponses, CorporateInfoUpdateStaffsErrors, CorporateInfoUpdateShareholdersData, CorporateInfoUpdateShareholdersResponses, CorporateInfoUpdateShareholdersErrors, CorporateInfoUpdateBranchesData, CorporateInfoUpdateBranchesResponses, CorporateInfoUpdateBranchesErrors, CorporateInfoUpdateInvestmentsData, CorporateInfoUpdateInvestmentsResponses, CorporateInfoUpdateInvestmentsErrors, CorporateInfoUpdateChangeInfosData, CorporateInfoUpdateChangeInfosResponses, CorporateInfoUpdateChangeInfosErrors, CorporateInfoUpdateAdministrativeLicensesData, CorporateInfoUpdateAdministrativeLicensesResponses, CorporateInfoUpdateAdministrativeLicensesErrors, CorporateInfoGetData, CorporateInfoGetResponses, CorporateInfoGetErrors, CorporateInfoGetListData, CorporateInfoGetListResponses, CorporateInfoGetListErrors, CorporateReportGetListData, CorporateReportGetListResponses, CorporateReportGetListErrors, CorporateReportCreateData, CorporateReportCreateResponses, CorporateReportCreateErrors, CorporateReportGetDownloadData, CorporateReportGetDownloadResponses, CorporateReportGetDownloadErrors, CorporateReportGetData, CorporateReportGetResponses, CorporateReportGetErrors, DynamicClaimsRefreshData, DynamicClaimsRefreshResponses, DynamicClaimsRefreshErrors, EmailSettingsGetData, EmailSettingsGetResponses, EmailSettingsGetErrors, EmailSettingsUpdateData, EmailSettingsUpdateResponses, EmailSettingsUpdateErrors, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailResponses, EmailSettingsSendTestEmailErrors, FeaturesDeleteData, FeaturesDeleteResponses, FeaturesDeleteErrors, FeaturesGetData, FeaturesGetResponses, FeaturesGetErrors, FeaturesUpdateData, FeaturesUpdateResponses, FeaturesUpdateErrors, LoginLoginData, LoginLoginResponses, LoginLoginErrors, LoginLogoutData, LoginLogoutResponses, LoginLogoutErrors, LoginCheckPasswordData, LoginCheckPasswordResponses, LoginCheckPasswordErrors, PermissionsGetData, PermissionsGetResponses, PermissionsGetErrors, PermissionsUpdateData, PermissionsUpdateResponses, PermissionsUpdateErrors, ProfileGetData, ProfileGetResponses, ProfileGetErrors, ProfileUpdateData, ProfileUpdateResponses, ProfileUpdateErrors, ProfileChangePasswordData, ProfileChangePasswordResponses, ProfileChangePasswordErrors, RoleGetAllListData, RoleGetAllListResponses, RoleGetAllListErrors, RoleGetListData, RoleGetListResponses, RoleGetListErrors, RoleCreateData, RoleCreateResponses, RoleCreateErrors, RoleDeleteData, RoleDeleteResponses, RoleDeleteErrors, RoleGetData, RoleGetResponses, RoleGetErrors, RoleUpdateData, RoleUpdateResponses, RoleUpdateErrors, TenantDeleteData, TenantDeleteResponses, TenantDeleteErrors, TenantGetData, TenantGetResponses, TenantGetErrors, TenantUpdateData, TenantUpdateResponses, TenantUpdateErrors, TenantGetListData, TenantGetListResponses, TenantGetListErrors, TenantCreateData, TenantCreateResponses, TenantCreateErrors, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringResponses, TenantDeleteDefaultConnectionStringErrors, TenantGetDefaultConnectionStringData, TenantGetDefaultConnectionStringResponses, TenantGetDefaultConnectionStringErrors, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringResponses, TenantUpdateDefaultConnectionStringErrors, TimeZoneSettingsGetData, TimeZoneSettingsGetResponses, TimeZoneSettingsGetErrors, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateResponses, TimeZoneSettingsUpdateErrors, TimeZoneSettingsGetTimezonesData, TimeZoneSettingsGetTimezonesResponses, TimeZoneSettingsGetTimezonesErrors, UserDeleteData, UserDeleteResponses, UserDeleteErrors, UserGetData, UserGetResponses, UserGetErrors, UserUpdateData, UserUpdateResponses, UserUpdateErrors, UserGetListData, UserGetListResponses, UserGetListErrors, UserCreateData, UserCreateResponses, UserCreateErrors, UserGetRolesData, UserGetRolesResponses, UserGetRolesErrors, UserUpdateRolesData, UserUpdateRolesResponses, UserUpdateRolesErrors, UserGetAssignableRolesData, UserGetAssignableRolesResponses, UserGetAssignableRolesErrors, UserFindByUsernameData, UserFindByUsernameResponses, UserFindByUsernameErrors, UserFindByEmailData, UserFindByEmailResponses, UserFindByEmailErrors, UserLookupFindByIdData, UserLookupFindByIdResponses, UserLookupFindByIdErrors, UserLookupFindByUserNameData, UserLookupFindByUserNameResponses, UserLookupFindByUserNameErrors, UserLookupSearchData, UserLookupSearchResponses, UserLookupSearchErrors, UserLookupGetCountData, UserLookupGetCountResponses, UserLookupGetCountErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApiDefinitionGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApiDefinitionGetResponses, AbpApiDefinitionGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/api-definition',
        ...options
    });
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApplicationConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApplicationConfigurationGetResponses, AbpApplicationConfigurationGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-configuration',
        ...options
    });
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(options: Options<AbpApplicationLocalizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpApplicationLocalizationGetResponses, AbpApplicationLocalizationGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-localization',
        ...options
    });
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByNameResponses, AbpTenantFindTenantByNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
        ...options
    });
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByIdResponses, AbpTenantFindTenantByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
        ...options
    });
};

export const accountRegister = <ThrowOnError extends boolean = false>(options?: Options<AccountRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountRegisterResponses, AccountRegisterErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(options?: Options<AccountSendPasswordResetCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountSendPasswordResetCodeResponses, AccountSendPasswordResetCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/send-password-reset-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(options?: Options<AccountVerifyPasswordResetTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountVerifyPasswordResetTokenResponses, AccountVerifyPasswordResetTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/verify-password-reset-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(options?: Options<AccountResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountResetPasswordResponses, AccountResetPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const auditLogGet = <ThrowOnError extends boolean = false>(options: Options<AuditLogGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuditLogGetResponses, AuditLogGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/audit-log/{id}',
        ...options
    });
};

export const auditLogGetList = <ThrowOnError extends boolean = false>(options?: Options<AuditLogGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuditLogGetListResponses, AuditLogGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/audit-log',
        ...options
    });
};

export const auditLogGetList2 = <ThrowOnError extends boolean = false>(options?: Options<AuditLogGetList2Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuditLogGetList2Responses, AuditLogGetList2Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/audit-log',
        ...options
    });
};

export const auditLogGet2 = <ThrowOnError extends boolean = false>(options: Options<AuditLogGet2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuditLogGet2Responses, AuditLogGet2Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/audit-log/{id}',
        ...options
    });
};

export const corporateInfoProject = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CorporateInfoProjectResponses, CorporateInfoProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoFindByCreditCode = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoFindByCreditCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CorporateInfoFindByCreditCodeResponses, CorporateInfoFindByCreditCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/find-by-credit-code',
        ...options
    });
};

export const corporateInfoGetOrAddCorporateInfo = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoGetOrAddCorporateInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CorporateInfoGetOrAddCorporateInfoResponses, CorporateInfoGetOrAddCorporateInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/or-add-corporate-info',
        ...options
    });
};

export const corporateInfoUpdateStaffs = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateStaffsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateStaffsResponses, CorporateInfoUpdateStaffsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/staffs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoUpdateShareholders = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateShareholdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateShareholdersResponses, CorporateInfoUpdateShareholdersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/shareholders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoUpdateBranches = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateBranchesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateBranchesResponses, CorporateInfoUpdateBranchesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/branches',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoUpdateInvestments = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateInvestmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateInvestmentsResponses, CorporateInfoUpdateInvestmentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/investments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoUpdateChangeInfos = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateChangeInfosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateChangeInfosResponses, CorporateInfoUpdateChangeInfosErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/change-infos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoUpdateAdministrativeLicenses = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoUpdateAdministrativeLicensesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CorporateInfoUpdateAdministrativeLicensesResponses, CorporateInfoUpdateAdministrativeLicensesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/administrative-licenses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateInfoGet = <ThrowOnError extends boolean = false>(options: Options<CorporateInfoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CorporateInfoGetResponses, CorporateInfoGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info/{id}',
        ...options
    });
};

export const corporateInfoGetList = <ThrowOnError extends boolean = false>(options?: Options<CorporateInfoGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CorporateInfoGetListResponses, CorporateInfoGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-info',
        ...options
    });
};

export const corporateReportGetList = <ThrowOnError extends boolean = false>(options?: Options<CorporateReportGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CorporateReportGetListResponses, CorporateReportGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-report',
        ...options
    });
};

export const corporateReportCreate = <ThrowOnError extends boolean = false>(options?: Options<CorporateReportCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CorporateReportCreateResponses, CorporateReportCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const corporateReportGetDownload = <ThrowOnError extends boolean = false>(options: Options<CorporateReportGetDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CorporateReportGetDownloadResponses, CorporateReportGetDownloadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-report/{id}/download',
        ...options
    });
};

export const corporateReportGet = <ThrowOnError extends boolean = false>(options: Options<CorporateReportGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CorporateReportGetResponses, CorporateReportGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/app/corporate-report/{id}',
        ...options
    });
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(options?: Options<DynamicClaimsRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DynamicClaimsRefreshResponses, DynamicClaimsRefreshErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/dynamic-claims/refresh',
        ...options
    });
};

export const emailSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailSettingsGetResponses, EmailSettingsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options
    });
};

export const emailSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmailSettingsUpdateResponses, EmailSettingsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const emailSettingsSendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsSendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmailSettingsSendTestEmailResponses, EmailSettingsSendTestEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing/send-test-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const featuresDelete = <ThrowOnError extends boolean = false>(options?: Options<FeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<FeaturesDeleteResponses, FeaturesDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresGet = <ThrowOnError extends boolean = false>(options?: Options<FeaturesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FeaturesGetResponses, FeaturesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(options?: Options<FeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<FeaturesUpdateResponses, FeaturesUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogin = <ThrowOnError extends boolean = false>(options?: Options<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginLoginResponses, LoginLoginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogout = <ThrowOnError extends boolean = false>(options?: Options<LoginLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoginLogoutResponses, LoginLogoutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/logout',
        ...options
    });
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(options?: Options<LoginCheckPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginCheckPasswordResponses, LoginCheckPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/check-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const permissionsGet = <ThrowOnError extends boolean = false>(options?: Options<PermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PermissionsGetResponses, PermissionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options
    });
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PermissionsUpdateResponses, PermissionsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileGet = <ThrowOnError extends boolean = false>(options?: Options<ProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileGetResponses, ProfileGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options
    });
};

export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ProfileUpdateResponses, ProfileUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(options?: Options<ProfileChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProfileChangePasswordResponses, ProfileChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetAllListResponses, RoleGetAllListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/all',
        ...options
    });
};

export const roleGetList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetListResponses, RoleGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options
    });
};

export const roleCreate = <ThrowOnError extends boolean = false>(options?: Options<RoleCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RoleCreateResponses, RoleCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleDelete = <ThrowOnError extends boolean = false>(options: Options<RoleDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RoleDeleteResponses, RoleDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleGet = <ThrowOnError extends boolean = false>(options: Options<RoleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoleGetResponses, RoleGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RoleUpdateResponses, RoleUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const tenantDelete = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantDeleteResponses, TenantDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantGet = <ThrowOnError extends boolean = false>(options: Options<TenantGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetResponses, TenantGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateResponses, TenantUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const tenantGetList = <ThrowOnError extends boolean = false>(options?: Options<TenantGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetListResponses, TenantGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options
    });
};

export const tenantCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantCreateResponses, TenantCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantDeleteDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantDeleteDefaultConnectionStringResponses, TenantDeleteDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantGetDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantGetDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetDefaultConnectionStringResponses, TenantGetDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantUpdateDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateDefaultConnectionStringResponses, TenantUpdateDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const timeZoneSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetResponses, TimeZoneSettingsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimeZoneSettingsUpdateResponses, TimeZoneSettingsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsGetTimezones = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetTimezonesResponses, TimeZoneSettingsGetTimezonesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone/timezones',
        ...options
    });
};

export const userDelete = <ThrowOnError extends boolean = false>(options: Options<UserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserDeleteResponses, UserDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetResponses, UserGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateResponses, UserUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetListResponses, UserGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponses, UserCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetRoles = <ThrowOnError extends boolean = false>(options: Options<UserGetRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetRolesResponses, UserGetRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options
    });
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(options: Options<UserUpdateRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateRolesResponses, UserUpdateRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(options?: Options<UserGetAssignableRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetAssignableRolesResponses, UserGetAssignableRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/assignable-roles',
        ...options
    });
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(options: Options<UserFindByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByUsernameResponses, UserFindByUsernameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-username/{userName}',
        ...options
    });
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(options: Options<UserFindByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByEmailResponses, UserFindByEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-email/{email}',
        ...options
    });
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByIdResponses, UserLookupFindByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/{id}',
        ...options
    });
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByUserNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByUserNameResponses, UserLookupFindByUserNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/by-username/{userName}',
        ...options
    });
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(options?: Options<UserLookupSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupSearchResponses, UserLookupSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/search',
        ...options
    });
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(options?: Options<UserLookupGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupGetCountResponses, UserLookupGetCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/count',
        ...options
    });
};